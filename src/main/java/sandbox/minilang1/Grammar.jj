options {
STATIC=false;
LOOKAHEAD=2;
}

// https://github.com/bkiers/Curta/blob/master/src/main/jjtree/CurtaParser.jjt
PARSER_BEGIN(MiniLang1Parser)

package sandbox.minilang1;
import java.util.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import sandbox.lang.StringUtils;


    
@SuppressWarnings("unchecked")
public abstract class MiniLang1Parser {
	private MiniLang1Context context;
	public MiniLang1Parser(MiniLang1Context ctx,java.io.InputStream stream, String encoding) {
	    this(stream,encoding);
		this.context = ctx;
		}
	public MiniLang1Parser(MiniLang1Context ctx,java.io.InputStream stream) {
	    this(stream);
		this.context = ctx;
		}
	public MiniLang1Parser(MiniLang1Context ctx,java.io.Reader reader) {
	    this(reader);
		this.context = ctx;
		}
}


PARSER_END(MiniLang1Parser)

SKIP :
{
" "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n"])* "\n">
| <"/*">: INSIDE_COMMENT
}

<INSIDE_COMMENT>
SKIP:
{
        <"*/">: DEFAULT
|       <~[]>
}


TOKEN : /* LITERALS */
{
  <OPAR:"(">
| <CPAR:")">
|  < O_BRACKET:"[" >
|  < C_BRACKET:"]" >
| <SEMICOLON: ";">
| <COLON: ":">
| <QUESTION: "?">
| <DOT: ".">
| <COMMA: ",">
| <EQ: "==">
| <NE: "!=">
| <LE: "<=">
| <GE: ">=">
| <LT: "<">
| <GT: ">">
| <PLUSPLUS: "++">
| <PLUS: "+">
| <MINUSMINUS: "--">
| <MINUS: "-">
| <MUL: "*">
| <DIV: "/">
| <MODULUS: "%">
| <ASSIGN: "=">
| <LEX_TRUE: "true">
| <LEX_FALSE: "false">
| <LEX_NIL: "nil">
| <#LETTER: ["_","a"-"z","A"-"Z"] >
| <#DIGIT: ["0"-"9"] >
| <#SIGN: ["-","+"]>
| <#EXPONENT: ("E"|"e") (<SIGN>)? (<DIGIT>)+ >
| <FLOATING_NUMBER: (<DIGIT>)* "." (<DIGIT>)* (<EXPONENT>)?
| (<DIGIT>)+ (<EXPONENT>) >
| <INT_NUMBER: (<DIGIT>)+ >
| <IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
| <#ESCAPE_CHAR: "\\" ["n","t","b","r","f","\\","'","\""] >
| <SIMPLE_QUOTE_LITERAL: "\'" ( (~["\'","\\","\n","\r"]) | <ESCAPE_CHAR> )* "\'" >
| <DOUBLE_QUOTE_LITERAL: "\"" ( (~["\"","\\","\n","\r"]) | <ESCAPE_CHAR> )*"\"" >
}

public void input(): { }
	{
	(expr() < SEMICOLON > )* < EOF >
	}

private MiniLang1Context.ASTNode assign_statement() : {MiniLang1Context.ASTNode varname;MiniLang1Context.ASTNode o;} { 
	varname= variable()
		(
		  <ASSIGN > o=expr()
			{
			return context.create(varname,MiniLang1Context.OP_VARIABLE_ASSIGN,o);
			}
		| < PLUSPLUS > {
		  	return  context.create(varname,MiniLang1Context.OP_VARIABLE_ASSIGN,
						context.create(varname,MiniLang1Context.OP_PLUS,context.wrapValue(1))
					);
			}
		| < MINUSMINUS > {
		  	return  context.create(varname,MiniLang1Context.OP_VARIABLE_ASSIGN,
						context.create(varname,MiniLang1Context.OP_MINUS,context.wrapValue(1))
					);
			}
		)
}

private MiniLang1Context.ASTNode array()  : { List<MiniLang1Context.ASTNode > list=Collections.emptyList();}
	{
	<O_BRACKET>(list=array_items())? <C_BRACKET>
		{
		return context.wrapValue(list);
		}
	}

private List<MiniLang1Context.ASTNode > array_items()  : { List<MiniLang1Context.ASTNode> list=new ArrayList< >();MiniLang1Context.ASTNode o;}
	{
	o=expr() {list.add(o);} (<COMMA > o=expr() {list.add(o);})*
	{
	return list;
	}
	}


private MiniLang1Context.ASTNode map() :{Map<String,MiniLang1Context.ASTNode> hash;}
	{
	<O_BRACKET> <COLON> <C_BRACKET> {
		return context.wrapValue(Collections.emptyMap());
		}
	|  <O_BRACKET> hash=map_items() {  return context.wrapValue(hash); } <C_BRACKET> {
	 	}
	}

private Map<String,MiniLang1Context.ASTNode > map_items() :{Map<String,MiniLang1Context.ASTNode> hash = new LinkedHashMap<String,MiniLang1Context.ASTNode>();  Map.Entry<String,MiniLang1Context.ASTNode> kv;}
	{
	 kv=pair() {hash.put(kv.getKey(),kv.getValue());}
	  (< COMMA > kv=pair(){hash.put(kv.getKey(),kv.getValue());})*  {
	    return hash;
	 	}
	}


private Map.Entry<String,MiniLang1Context.ASTNode> pair() : {Token t;String key; MiniLang1Context.ASTNode value;}
	{
	(	  t=< IDENTIFIER > {key=t.image;} |key=base_string()) <COLON> value=expr()  {
		return new AbstractMap.SimpleEntry<String,MiniLang1Context.ASTNode>(key,value);
		}
	} 



private MiniLang1Context.ASTNode expr():
{
    MiniLang1Context.ASTNode a;
    MiniLang1Context.ASTNode b;
}
{
    a=term()
    (
         < PLUS > b=expr()    {a= context.create(a, MiniLang1Context.OP_PLUS ,b); }
    |    < MINUS > b=expr()    { a= context.create(a, MiniLang1Context.OP_MINUS ,b);  }
    )*
    { return a; }
}

private MiniLang1Context.ASTNode term():
{
    MiniLang1Context.ASTNode a;
    MiniLang1Context.ASTNode b;
}
{
    a=unary()
    (
        "*" b=term()    {a= context.create(a, MiniLang1Context.OP_MULTIPLY ,b); }
    |   "/" b=term()    {a= context.create(a, MiniLang1Context.OP_DIVIDE ,b);}
    )*
    { return a; }
}
private MiniLang1Context.ASTNode unary():
{
    MiniLang1Context.ASTNode a;
}
{
   < MINUS > a=any()     { return context.create(MiniLang1Context.OP_NEGATE ,a); }
|   a=any()         { return a; }
}


private MiniLang1Context.ASTNode any(): { MiniLang1Context.ASTNode o=null;Token t; List<MiniLang1Context.ASTNode > a; Map<String,MiniLang1Context.ASTNode > h;} {
   	(
	  o= functionCall()
	  | o= variable()
	  | o= array()
	  | o= map()
	  | o=floating()
	  | o = bool()
	  | o = nil()
	  | o= assign_statement()
	  | < OPAR > o=term() <CPAR >
	  )
	  {
	    return o;
	  }
	}
private MiniLang1Context.ASTNode functionCall() : { Token t;List<MiniLang1Context.ASTNode > list_params=Collections.emptyList(); Map<String,MiniLang1Context.ASTNode> hash_params=Collections.emptyMap();} {
	t=< IDENTIFIER > <OPAR >
		(
		list_params = array_items() (< COMMA > hash_params=map_items())? 
		| hash_params = map_items()
		)?
	  	<CPAR >
		{
		return context.call(t.image,list_params,hash_params);
		}
	}

private MiniLang1Context.ASTNode floating() : {Token t;} {
	t= <FLOATING_NUMBER> {
		return context.wrapValue( new BigDecimal(t.image));
		}
	}
private MiniLang1Context.ASTNode intNumber() : {Token t;} {
	t= <INT_NUMBER> {
		return context.wrapValue( new BigInteger(t.image));
		}
	}
private MiniLang1Context.ASTNode string() : {String s;} {
	s= base_string() {
		return context.wrapValue(s);
		}
	}

private String base_string()  : {Token t;} {
	t= <DOUBLE_QUOTE_LITERAL> {
		return StringUtils.unquote(t.image);
		}
	}

private MiniLang1Context.ASTNode bool() : {} {
	(<LEX_TRUE>{
		return context.wrapValue(Boolean.TRUE);
		}
	|<LEX_FALSE> {
		return context.wrapValue(Boolean.FALSE);
		}
	)
	}
private MiniLang1Context.ASTNode nil() : {} {
	<LEX_NIL>{
		return context.wrapValue(null);
		}
	}

private MiniLang1Context.ASTNode variable(): { Token t; }
	{
	t= < IDENTIFIER > {
		return context.createVariable(t.image);
	 	}
	}
