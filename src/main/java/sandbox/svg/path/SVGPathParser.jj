/**

java -cp ~/package/javacc/javacc.jar javacc SVGPathParser.jj

*/
options {
STATIC=false;
DEBUG_PARSER=false;
DEBUG_TOKEN_MANAGER=false;
LOOKAHEAD=2;
FORCE_LA_CHECK=true;
}


PARSER_BEGIN(SVGPathParser)
package sandbox.svg.path;
import java.awt.Shape;
import java.awt.geom.GeneralPath;
import java.awt.geom.Arc2D;
import java.awt.geom.Point2D;

/**
 * 
 * http://www.w3.org/TR/SVG11/paths.html#PathDataBNF
 */
public class SVGPathParser
	{
	private Point2D.Double start=null;
	private Point2D.Double last=null;
	
	public SVGPathParser(final String s)
		{
		this(new java.io.StringReader(s));
		}
	
	public static Shape parse(final String s)
		{
		try
			{
			return new SVGPathParser(s).path();
			}
		catch(final ParseException err)
			{
			throw new IllegalArgumentException(err);
			}
		}
	
	public static void main(String args[])
		throws Exception
		{
		for(String s:args)
			{
			parse(s);
			}
		}
	}
PARSER_END(SVGPathParser)

TOKEN:
	{
	  <DOT: "." >
	| <PLUS: "+" >
	| <MINUS: "-" >
	| <#DIGIT: ["0"-"9"] >
	| <POSITIVE_INTEGER: (<DIGIT>)+ >
	| <SIGN: (<PLUS> | <MINUS>) >
	| <#EXPONENT: ("E"|"e") (<SIGN>)? <POSITIVE_INTEGER> >
	| <FLOATING_NUMBER:(<SIGN>)?
	         ( 
		  (<DIGIT>)* <DOT> (<DIGIT>)* (<EXPONENT>)?
		| <POSITIVE_INTEGER> (<EXPONENT>)
		)
		 >
	| <EXP: ("E"|"e") >
	| <MOVETO: ("M"|"m")>
	| <LINEH: ("H"|"h")>
	| <LINEV: ("V"|"v")>
	| <LINETO: ("L"|"l")>
	| <CLOSEPATH: ("Z"|"z")>
	| <CUBICBEZIER: ("C"|"c")>
	| <SMOOTHCUBICBEZIER: ("S"|"s")>
	| <QUADRATICCURVE: ("Q"|"q")>
	| <QUADRATICSMOOTH: ("T"|"t")>
	| <ELLIPTICARC: ("A"|"a")>
	}


SKIP :
	{
	" "
	| "\t"
	| "\n"
	| "\r"
	| "," /* comma */
	}

public Shape path():{GeneralPath shape=new GeneralPath();}
	{
	( moveTo(shape) drawtoCommands(shape) )+
	<EOF>
		{
		return shape;
		}
	}


/**
Start a new sub-path at the given (x,y) coordinate.
M (uppercase) indicates that absolute coordinates will follow; m (lowercase) indicates that relative coordinates will follow. If a relative moveto (m) appears as the first element of the path, then it is treated as a pair of absolute coordinates. If a moveto is followed by multiple pairs of coordinates, the subsequent pairs are treated as implicit lineto commands.
*/
private void moveTo(GeneralPath shape):{boolean relative;Token t;Point2D.Double p;}
	{
	(
	t=<MOVETO>{ relative=t.image.equals("m");}

	p=coords()
		{
		if(last==null || !relative)
			{
			last=p;
			}
		else
			{
			last.x+=p.getX();
			last.y+=p.getY();
			}
		shape.moveTo(last.getX(),last.getY());
		this.start=this.last;
		}
	(lineToSequence(shape,relative))?
	)
	}
	
void drawtoCommands(GeneralPath shape):{}	
	{
	(drawtoCommand(shape))*
	}
	
void drawtoCommand(GeneralPath shape):{}
    {
    (
    closePath(shape)
    | lineTo(shape)
    | lineH(shape)
    | lineV(shape)
    | cubicBezier(shape)
    | smoothCubicBezier(shape)
    | quadraticCurve(shape)
    | smootQuadraticCurve(shape)
    | ellipticArc(shape)
    )
    }
	
/**
 Draw a line from the current point to the given (x,y) coordinate which becomes the new current point. L (uppercase) indicates that absolute coordinates will follow; l (lowercase) indicates that relative coordinates will follow. A number of coordinates pairs may be specified to draw a polyline. At the end of the command, the new current point is set to the final set of coordinates provided.
 */
private void lineTo(GeneralPath shape):{boolean relative;Token t;}
	{
	t=<LINETO>{ relative=t.image.equals("l");}
	lineToSequence(shape,relative)
	}

private void lineToSequence(GeneralPath shape,boolean relative):{Point2D.Double p;}
	{
	(p=coords()
		{
		if(!relative)
			{
			this.last=p;
			}
		else
			{
			this.last.x+=p.getX();
			this.last.y+=p.getY();
			}
		shape.lineTo(this.last.getX(),this.last.getY());
		})+
	}

/**
Draws a horizontal line from the current point (cpx, cpy) to (x, cpy). H (uppercase) indicates that absolute coordinates will follow; h  (lowercase) indicates that relative coordinates will follow. Multiple x values can be provided (although usually this doesn't make sense). At the end of the command, the new current point becomes (x, cpy) for the final value of x.*/

private void lineH(GeneralPath shape):{boolean relative;Token t;}
	{
	t=<LINEH>{ relative=t.image.equals("h");}
	( lineHSequence(shape,relative) )
	}	

private void lineHSequence(GeneralPath shape,boolean relative):{double v;}
	{
	( v=coordinate()
		{
		if(!relative)
			{
			this.last.x=v;
			}
		else
			{
			this.last.x+=v;
			}
		shape.lineTo(this.last.getX(),this.last.getY());
		})+
	}

/**
Draws a vertical line from the current point (cpx, cpy) to (cpx, y). V (uppercase) indicates that absolute coordinates will follow; v  (lowercase) indicates that relative coordinates will follow. Multiple y values can be provided (although usually this doesn't make sense). At the end of the command, the new current point becomes (cpx, y) for the final value of y.*/
private void lineV(GeneralPath shape):{boolean relative;Token t;}
	{
	t=<LINEV>{ relative=t.image.equals("v");}
	(lineVSequence(shape,relative))
	}
	
private void lineVSequence(GeneralPath shape,boolean relative):{double v;}
	{
	( v=coordinate()
		{
		 if(!relative)
			{
			this.last.y=v;
			}
		else
			{
			this.last.y+=v;
			}
		shape.lineTo(this.last.getX(),this.last.getY());
		})+
	}


/**
Close the current subpath by drawing a straight line from the current point to current subpath's initial point.
*/
private void closePath(GeneralPath shape):{}
	{
	<CLOSEPATH>
		{
		shape.closePath();
		this.last=this.start;
		}
	}
/** Draws a cubic Bézier curve from the current point to (x,y) using (x1,y1) as the control point at the beginning of the curve and (x2,y2) as the control point at the end of the curve. C (uppercase) indicates that absolute coordinates will follow; c (lowercase) indicates that relative coordinates will follow. Multiple sets of coordinates may be specified to draw a polybézier. At the end of the command, the new current point becomes the final (x,y) coordinate pair used in the polybézier */
private void cubicBezier(GeneralPath shape):
	{
	Token t;
	boolean relative;
	Point2D.Double p1,p2,p3;
	}
	{
	t=<CUBICBEZIER>{ relative=t.image.equals("c");}
			((
		p1=coords()
		p2=coords()
		p3=coords()
		){
		if(relative)
			{
			p1.x+=last.x;
			p1.y+=last.y;
			p2.x+=last.x;
			p2.y+=last.y;
			p3.x+=last.x;
			p3.y+=last.y;
			}
		shape.curveTo(p1.getX(),p1.getY(),p2.getX(),p2.getY(),p3.getX(),p3.getY());
		this.last=p3;
		})+
	}

/**
 *Draws a cubic Bézier curve from the current point to (x,y). The first control point is assumed to be the reflection of the second control point on the previous command relative to the current point. (If there is no previous command or if the previous command was not an C, c, S or s, assume the first control point is coincident with the current point.) (x2,y2) is the second control point (i.e., the control point at the end of the curve). S (uppercase) indicates that absolute coordinates will follow; s (lowercase) indicates that relative coordinates will follow. Multiple sets of coordinates may be specified to draw a polybézier. At the end of the command, the new current point becomes the final (x,y) coordinate pair used in the polybézier.
 */
private void smoothCubicBezier(GeneralPath shape):
	{
	Token t;
	boolean relative;
	Point2D.Double p1,p2;
	}
	{
	t=<SMOOTHCUBICBEZIER>{ relative=t.image.equals("s");}
			((
		p1=coords()
		p2=coords()
		){
		if(relative)
			{
			p1.x+=last.x;
			p1.y+=last.y;
			p2.x+=last.x;
			p2.y+=last.y;
			}
		//WRONG TODO
		shape.curveTo(last.getX(),last.getY(),p1.getX(),p1.getY(),p2.getX(),p2.getY());
		this.last=p2;
		})+
	}
/**
Draws a quadratic Bézier curve from the current point to (x,y) using (x1,y1) as the control point. Q (uppercase) indicates that absolute coordinates will follow; q (lowercase) indicates that relative coordinates will follow. Multiple sets of coordinates may be specified to draw a polybézier. At the end of the command, the new current point becomes the final (x,y) coordinate pair used in the polybézier.
*/
private void quadraticCurve(GeneralPath shape):
	{
	Token t;
	boolean relative;
	Point2D.Double p1,p2;
	}
	{
	t=<QUADRATICCURVE>{ relative=t.image.equals("q");}
			((
		p1=coords()
		p2=coords()
		){
		if(relative)
			{
			p1.x+=last.x;
			p1.y+=last.y;
			p2.x+=last.x;
			p2.y+=last.y;
			}
		//WRONG TODO
		shape.quadTo(p1.getX(),p1.getY(),p2.getX(),p2.getY());
		this.last=p2;
		})+
	}
	
	
private void smootQuadraticCurve(GeneralPath shape):
	{
	Token t;
	boolean relative;
	Point2D.Double p1;
	}
	{
	t=<QUADRATICSMOOTH>{ relative=t.image.equals("q");}
			((
		p1=coords()
		){
		if(relative)
			{
			p1.x+=last.x;
			p1.y+=last.y;
			}
		//WRONG TODO
		shape.quadTo(last.getX(),last.getY(),p1.getX(),p1.getY());
		this.last=p1;
		})+
	}

/** Draws an elliptical arc from the current point to (x, y). The size and orientation of the ellipse are defined by two radii (rx, ry) and an x-axis-rotation, which indicates how the ellipse as a whole is rotated relative to the current coordinate system. The center (cx, cy) of the ellipse is calculated automatically to satisfy the constraints imposed by the other parameters. large-arc-flag and sweep-flag contribute to the automatic calculations and help determine how the arc is drawn.*/
private void ellipticArc(GeneralPath shape):
	{
	double rx,ry;
	double theta;
	int larg_arc_flag;
	int sweep_flag;
	double x,y;
	}
	{
	<ELLIPTICARC>
			((
		rx=coordinate()
		ry=coordinate()
		theta=number()
		larg_arc_flag=integer()
		sweep_flag=integer()
		x=coordinate()
		y=coordinate()
		){
		 /* this function was copied from 
		   ZZ Coder
		   http://stackoverflow.com/questions/1805101/svg-elliptical-arcs-with-java/1805151#1805151
		  */
			// Ensure radii are valid
            if (rx == 0 || ry == 0) {
                    shape.lineTo(x, y);
                    this.last.x=x;
                    this.last.y=y;
                    return;
            }
            // Get the current (x, y) coordinates of the shape
            Point2D p2d = shape.getCurrentPoint();
            double x0 = p2d.getX();
            double y0 = p2d.getY();
            // Compute the half distance between the current and the final point
            double dx2 = (x0 - x) / 2.0;
            double dy2 = (y0 - y) / 2.0;
            // Convert theta from degrees to radians
            theta =  Math.toRadians(theta % 360);

            //
            // Step 1 : Compute (x1, y1)
            //
            double x1 = (Math.cos(theta) * (double) dx2 + Math.sin(theta)
                            * (double) dy2);
            double y1 = (-Math.sin(theta) * (double) dx2 + Math.cos(theta)
                            * (double) dy2);
                            
            last.x=x1;
            last.y=y1;                
                        
            // Ensure radii are large enough
            rx = Math.abs(rx);
            ry = Math.abs(ry);
            double Prx = rx * rx;
            double Pry = ry * ry;
            double Px1 = x1 * x1;
            double Py1 = y1 * y1;
            double d = Px1 / Prx + Py1 / Pry;
            if (d > 1) {
                    rx = Math.abs((Math.sqrt(d) * (double) rx));
                    ry = Math.abs((Math.sqrt(d) * (double) ry));
                    Prx = rx * rx;
                    Pry = ry * ry;
            }

            //
            // Step 2 : Compute (cx1, cy1)
            //
            double sign = (larg_arc_flag == sweep_flag) ? -1d : 1d;
            double coef = (sign * Math
                            .sqrt(((Prx * Pry) - (Prx * Py1) - (Pry * Px1))
                                            / ((Prx * Py1) + (Pry * Px1))));
            double cx1 = coef * ((rx * y1) / ry);
            double cy1 = coef * -((ry * x1) / rx);

            //
            // Step 3 : Compute (cx, cy) from (cx1, cy1)
            //
            double sx2 = (x0 + x) / 2.0f;
            double sy2 = (y0 + y) / 2.0f;
            double cx = sx2
                            +  (Math.cos(theta) * (double) cx1 - Math.sin(theta)
                                            * (double) cy1);
            double cy = sy2
                            + (double) (Math.sin(theta) * (double) cx1 + Math.cos(theta)
                                            * (double) cy1);

            //
            // Step 4 : Compute the angleStart (theta1) and the angleExtent (dtheta)
            //
            double ux = (x1 - cx1) / rx;
            double uy = (y1 - cy1) / ry;
            double vx = (-x1 - cx1) / rx;
            double vy = (-y1 - cy1) / ry;
            double p, n;
            // Compute the angle start
            n = Math.sqrt((ux * ux) + (uy * uy));
            p = ux; // (1 * ux) + (0 * uy)
            sign = (uy < 0) ? -1d : 1d;
            double angleStart = Math.toDegrees(sign * Math.acos(p / n));
            // Compute the angle extent
            n = Math.sqrt((ux * ux + uy * uy) * (vx * vx + vy * vy));
            p = ux * vx + uy * vy;
            sign = (ux * vy - uy * vx < 0) ? -1d : 1d;
            double angleExtent = Math.toDegrees(sign * Math.acos(p / n));
            if (sweep_flag!=1 && angleExtent > 0) {
                    angleExtent -= 360f;
            } else if (sweep_flag==1 && angleExtent < 0) {
                    angleExtent += 360f;
            }
            angleExtent %= 360f;
            angleStart %= 360f;

            Arc2D.Double arc = new Arc2D.Double();
            arc.x = cx - rx;
            arc.y = cy - ry;
            arc.width = rx * 2.0f;
            arc.height = ry * 2.0f;
            arc.start = -angleStart;
            arc.extent = -angleExtent;
            shape.append(arc, true);
		
		})+
	}
	
private Point2D.Double coords():{double x;double y;}
	{
	(x=coordinate()  y=coordinate())
		{
		return new Point2D.Double(x,y);
		}
	}

private double coordinate():{double n;}
	{
	(n=number())
		{
		return n;
		}
	}

private double number():{double f;}
	{
	(f=integer()|f=floating())
		{
		return f;
		}
	}

private double floating():{Token t;}
	{
	t=<FLOATING_NUMBER> { return Double.parseDouble(t.image);}
	}

private int integer():{int n;int sig=1;}
	{
	(<PLUS>{sig=1;} | <MINUS>{sig=-1;})? n=positiveInteger() { return n*sig;}
	}

private int positiveInteger():{Token t;}
	{
	t=<POSITIVE_INTEGER> { return Integer.parseInt(t.image);}
	}
