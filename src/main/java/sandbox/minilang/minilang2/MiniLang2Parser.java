/* MiniLang2Parser.java */
/* Generated By:JavaCC: Do not edit this line. MiniLang2Parser.java */
package sandbox.minilang.minilang2;
import java.util.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import sandbox.lang.StringUtils;
import java.util.function.Supplier;



@SuppressWarnings("unchecked")
public abstract class MiniLang2Parser implements MiniLang2ParserConstants {
        private MiniLang2Context context;
        public MiniLang2Parser(final MiniLang2Context ctx,java.io.InputStream stream, String encoding) {
            this(stream,encoding);
                this.context = ctx;
                }
        public MiniLang2Parser(final MiniLang2Context ctx,java.io.InputStream stream) {
            this(stream);
                this.context = ctx;
                }
        public MiniLang2Parser(MiniLang2Context ctx,java.io.Reader reader) {
            this(reader);
                this.context = ctx;
                }

  final public void input() throws ParseException {
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
      expr();
      jj_consume_token(SEMICOLON);
    }
    jj_consume_token(0);
}

  final private Supplier<Object> assign_statement() throws ParseException {MiniLang2Context.Variable varname;Supplier<Object> o;
    varname = variable();
    if (jj_2_2(2)) {
      jj_consume_token(ASSIGN);
      o = expr();
{if ("" != null) return context.put(varname,o);}
    } else if (jj_2_3(2)) {
      jj_consume_token(PLUSPLUS);
{if ("" != null) return  context.put(varname,context.apply(context.get(varname),'+',context.wrap(1)));}
    } else if (jj_2_4(2)) {
      jj_consume_token(MINUSMINUS);
{if ("" != null) return  context.put(varname,context.apply(context.get(varname),'-',context.wrap(1)));}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final private Supplier<Object> array() throws ParseException {List<Supplier<Object> > list=Collections.emptyList();
    jj_consume_token(O_BRACKET);
    if (jj_2_5(2)) {
      list = array_items();
    } else {
      ;
    }
    jj_consume_token(C_BRACKET);
{if ("" != null) return context.wrap(list);}
    throw new Error("Missing return statement in function");
}

  final private List<Supplier<Object> > array_items() throws ParseException {List<Supplier<Object>> list=new ArrayList< >();Supplier<Object> o;
    o = expr();
list.add(o);
    label_2:
    while (true) {
      if (jj_2_6(2)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(COMMA);
      o = expr();
list.add(o);
    }
{if ("" != null) return list;}
    throw new Error("Missing return statement in function");
}

  final private Supplier<Object> map() throws ParseException {Map<String,Supplier<Object>> hash;
    if (jj_2_7(2)) {
      jj_consume_token(O_BRACKET);
      jj_consume_token(COLON);
      jj_consume_token(C_BRACKET);
{if ("" != null) return context.wrap(Collections.emptyMap());}
    } else if (jj_2_8(2)) {
      jj_consume_token(O_BRACKET);
      hash = map_items();
{if ("" != null) return  context.wrap(hash);}
      jj_consume_token(C_BRACKET);

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final private Map<String,Supplier<Object> > map_items() throws ParseException {Map<String,Supplier<Object>> hash = new LinkedHashMap<String,Supplier<Object>>();  Map.Entry<String,Supplier<Object>> kv;
    kv = pair();
hash.put(kv.getKey(),kv.getValue());
    label_3:
    while (true) {
      if (jj_2_9(2)) {
        ;
      } else {
        break label_3;
      }
      jj_consume_token(COMMA);
      kv = pair();
hash.put(kv.getKey(),kv.getValue());
    }
{if ("" != null) return hash;}
    throw new Error("Missing return statement in function");
}

  final private Map.Entry<String,Supplier<Object>> pair() throws ParseException {Token t;String key; Supplier<Object> value;
    if (jj_2_10(2)) {
      t = jj_consume_token(IDENTIFIER);
key=t.image;
    } else if (jj_2_11(2)) {
      key = base_string();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(COLON);
    value = expr();
{if ("" != null) return new AbstractMap.SimpleEntry<String,Supplier<Object>>(key,value);}
    throw new Error("Missing return statement in function");
}

  final private Supplier<Object> expr() throws ParseException {Supplier<Object> a;  Supplier<Object> b;
    a = term();
    label_4:
    while (true) {
      if (jj_2_12(2)) {
        ;
      } else {
        break label_4;
      }
      if (jj_2_13(2)) {
        jj_consume_token(PLUS);
        b = expr();
a= context.apply(a, '+' ,b);
      } else if (jj_2_14(2)) {
        jj_consume_token(MINUS);
        b = expr();
a= context.apply(a, '-' ,b);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return a;}
    throw new Error("Missing return statement in function");
}

  final private Supplier<Object> term() throws ParseException {Supplier<Object> a;  Supplier<Object> b;
    a = unary();
    label_5:
    while (true) {
      if (jj_2_15(2)) {
        ;
      } else {
        break label_5;
      }
      if (jj_2_16(2)) {
        jj_consume_token(MUL);
        b = term();
a= context.apply(a, '*' ,b);
      } else if (jj_2_17(2)) {
        jj_consume_token(DIV);
        b = term();
a= context.apply(a, '/' ,b);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return a;}
    throw new Error("Missing return statement in function");
}

  final private Supplier<Object> unary() throws ParseException {Supplier<Object> a;
    if (jj_2_18(2)) {
      jj_consume_token(MINUS);
      a = any();
{if ("" != null) return context.apply('-',a);}
      jj_consume_token(EXCLAM);
      a = any();
{if ("" != null) return context.apply('!',a);}
    } else if (jj_2_19(2)) {
      a = any();
{if ("" != null) return a;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final private Supplier<Object> any() throws ParseException {Supplier<Object> o=null; MiniLang2Context.Variable v=null;
    if (jj_2_20(2)) {
      o = functionCall();
    } else if (jj_2_21(2)) {
      v = variable();
{if ("" != null) return context.wrap(v);}
    } else if (jj_2_22(2)) {
      o = array();
    } else if (jj_2_23(2)) {
      o = map();
    } else if (jj_2_24(2)) {
      o = floating();
    } else if (jj_2_25(2)) {
      o = bool();
    } else if (jj_2_26(2)) {
      o = nil();
    } else if (jj_2_27(2)) {
      o = assign_statement();
    } else if (jj_2_28(2)) {
      jj_consume_token(OPAR);
      o = term();
      jj_consume_token(CPAR);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return o;}
    throw new Error("Missing return statement in function");
}

  final private Supplier<Object> functionCall() throws ParseException {Token t;List< Supplier<Object> > list_params=Collections.emptyList(); Map<String,Supplier<Object>> hash_params=Collections.emptyMap();
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(OPAR);
    if (jj_2_32(2)) {
      if (jj_2_30(2)) {
        list_params = array_items();
        if (jj_2_29(2)) {
          jj_consume_token(COMMA);
          hash_params = map_items();
        } else {
          ;
        }
      } else if (jj_2_31(2)) {
        hash_params = map_items();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
    jj_consume_token(CPAR);
{if ("" != null) return context.call(t.image,list_params,hash_params);}
    throw new Error("Missing return statement in function");
}

  final private Supplier<Object> floating() throws ParseException {Token t;
    t = jj_consume_token(FLOATING_NUMBER);
{if ("" != null) return context.wrap(context.parseFloat(t.image));}
    throw new Error("Missing return statement in function");
}

  final private Supplier<Object> intNumber() throws ParseException {Token t;
    t = jj_consume_token(INT_NUMBER);
{if ("" != null) return context.wrap(context.parseInt(t.image));}
    throw new Error("Missing return statement in function");
}

  final private Supplier<Object> string() throws ParseException {String s;
    s = base_string();
{if ("" != null) return context.wrap(s);}
    throw new Error("Missing return statement in function");
}

  final private String base_string() throws ParseException {Token t;
    t = jj_consume_token(DOUBLE_QUOTE_LITERAL);
{if ("" != null) return StringUtils.unquote(t.image);}
    throw new Error("Missing return statement in function");
}

  final private Supplier<Object> bool() throws ParseException {
    if (jj_2_33(2)) {
      jj_consume_token(LEX_TRUE);
{if ("" != null) return context.wrap(Boolean.TRUE);}
    } else if (jj_2_34(2)) {
      jj_consume_token(LEX_FALSE);
{if ("" != null) return context.wrap(Boolean.FALSE);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final private Supplier<Object> nil() throws ParseException {
    jj_consume_token(LEX_NIL);
{if ("" != null) return context.wrap(null);}
    throw new Error("Missing return statement in function");
}

  final private MiniLang2Context.Variable variable() throws ParseException {Token t;
    t = jj_consume_token(IDENTIFIER);
{if ("" != null) return context.createVariable(t.image);}
    throw new Error("Missing return statement in function");
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_11()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_12()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_13()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_14()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_15()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_16()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_17()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_18()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_19()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_20()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_21()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_22()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_23()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_24()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_25()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_26()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_27()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_28()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_29()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_30()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_31()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_32()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_33()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_34()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_3_17()
 {
    if (jj_scan_token(DIV)) return true;
    if (jj_3R_term_176_5_11()) return true;
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_scan_token(MUL)) return true;
    if (jj_3R_term_176_5_11()) return true;
    return false;
  }

  private boolean jj_3_15()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) return true;
    }
    return false;
  }

  private boolean jj_3R_term_176_5_11()
 {
    if (jj_3R_unary_188_4_21()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_15()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_expr_166_5_6()) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_expr_166_5_6()) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) return true;
    }
    return false;
  }

  private boolean jj_3R_variable_261_9_14()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_expr_166_5_6()
 {
    if (jj_3R_term_176_5_11()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_12()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_nil_254_9_19()
 {
    if (jj_scan_token(LEX_NIL)) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_pair_156_9_9()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) return true;
    }
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3_29()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_map_items_147_10_8()) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_expr_166_5_6()) return true;
    return false;
  }

  private boolean jj_3_34()
 {
    if (jj_scan_token(LEX_FALSE)) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_pair_156_9_9()) return true;
    return false;
  }

  private boolean jj_3_33()
 {
    if (jj_scan_token(LEX_TRUE)) return true;
    return false;
  }

  private boolean jj_3R_bool_245_9_18()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) return true;
    }
    return false;
  }

  private boolean jj_3R_map_items_147_10_8()
 {
    if (jj_3R_pair_156_9_9()) return true;
    return false;
  }

  private boolean jj_3R_base_string_239_9_10()
 {
    if (jj_scan_token(DOUBLE_QUOTE_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_scan_token(O_BRACKET)) return true;
    if (jj_3R_map_items_147_10_8()) return true;
    return false;
  }

  private boolean jj_3R_map_138_9_16()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) return true;
    }
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_scan_token(O_BRACKET)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_array_items_129_9_7()) return true;
    return false;
  }

  private boolean jj_3R_array_items_129_9_7()
 {
    if (jj_3R_expr_166_5_6()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_6()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_31()
 {
    if (jj_3R_map_items_147_10_8()) return true;
    return false;
  }

  private boolean jj_3R_floating_223_9_17()
 {
    if (jj_scan_token(FLOATING_NUMBER)) return true;
    return false;
  }

  private boolean jj_3_30()
 {
    if (jj_3R_array_items_129_9_7()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_32()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) return true;
    }
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_scan_token(MINUSMINUS)) return true;
    return false;
  }

  private boolean jj_3R_array_121_9_15()
 {
    if (jj_scan_token(O_BRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) jj_scanpos = xsp;
    if (jj_scan_token(C_BRACKET)) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_scan_token(PLUSPLUS)) return true;
    return false;
  }

  private boolean jj_3R_functionCall_211_9_13()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OPAR)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_expr_166_5_6()) return true;
    return false;
  }

  private boolean jj_3_28()
 {
    if (jj_scan_token(OPAR)) return true;
    if (jj_3R_term_176_5_11()) return true;
    return false;
  }

  private boolean jj_3_27()
 {
    if (jj_3R_assign_statement_104_9_20()) return true;
    return false;
  }

  private boolean jj_3_26()
 {
    if (jj_3R_nil_254_9_19()) return true;
    return false;
  }

  private boolean jj_3_25()
 {
    if (jj_3R_bool_245_9_18()) return true;
    return false;
  }

  private boolean jj_3_24()
 {
    if (jj_3R_floating_223_9_17()) return true;
    return false;
  }

  private boolean jj_3_23()
 {
    if (jj_3R_map_138_9_16()) return true;
    return false;
  }

  private boolean jj_3_22()
 {
    if (jj_3R_array_121_9_15()) return true;
    return false;
  }

  private boolean jj_3_21()
 {
    if (jj_3R_variable_261_9_14()) return true;
    return false;
  }

  private boolean jj_3R_assign_statement_104_9_20()
 {
    if (jj_3R_variable_261_9_14()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_20()
 {
    if (jj_3R_functionCall_211_9_13()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_expr_166_5_6()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_any_195_9_12()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_3R_base_string_239_9_10()) return true;
    return false;
  }

  private boolean jj_3_19()
 {
    if (jj_3R_any_195_9_12()) return true;
    return false;
  }

  private boolean jj_3R_unary_188_4_21()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) return true;
    }
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_any_195_9_12()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public MiniLang2ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[34];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MiniLang2Parser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniLang2Parser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new MiniLang2ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 0; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MiniLang2Parser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new MiniLang2ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new MiniLang2ParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MiniLang2Parser(MiniLang2ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MiniLang2ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[46];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 0; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 46; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 34; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			   case 9: jj_3_10(); break;
			   case 10: jj_3_11(); break;
			   case 11: jj_3_12(); break;
			   case 12: jj_3_13(); break;
			   case 13: jj_3_14(); break;
			   case 14: jj_3_15(); break;
			   case 15: jj_3_16(); break;
			   case 16: jj_3_17(); break;
			   case 17: jj_3_18(); break;
			   case 18: jj_3_19(); break;
			   case 19: jj_3_20(); break;
			   case 20: jj_3_21(); break;
			   case 21: jj_3_22(); break;
			   case 22: jj_3_23(); break;
			   case 23: jj_3_24(); break;
			   case 24: jj_3_25(); break;
			   case 25: jj_3_26(); break;
			   case 26: jj_3_27(); break;
			   case 27: jj_3_28(); break;
			   case 28: jj_3_29(); break;
			   case 29: jj_3_30(); break;
			   case 30: jj_3_31(); break;
			   case 31: jj_3_32(); break;
			   case 32: jj_3_33(); break;
			   case 33: jj_3_34(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
