/* Generated By:JavaCC: Do not edit this line. MiniLang2ParserConstants.java */
package sandbox.minilang.minilang2;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MiniLang2ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int OPAR = 9;
  /** RegularExpression Id. */
  int CPAR = 10;
  /** RegularExpression Id. */
  int O_BRACKET = 11;
  /** RegularExpression Id. */
  int C_BRACKET = 12;
  /** RegularExpression Id. */
  int SEMICOLON = 13;
  /** RegularExpression Id. */
  int COLON = 14;
  /** RegularExpression Id. */
  int QUESTION = 15;
  /** RegularExpression Id. */
  int EXCLAM = 16;
  /** RegularExpression Id. */
  int DOT = 17;
  /** RegularExpression Id. */
  int COMMA = 18;
  /** RegularExpression Id. */
  int EQ = 19;
  /** RegularExpression Id. */
  int NE = 20;
  /** RegularExpression Id. */
  int LE = 21;
  /** RegularExpression Id. */
  int GE = 22;
  /** RegularExpression Id. */
  int LT = 23;
  /** RegularExpression Id. */
  int GT = 24;
  /** RegularExpression Id. */
  int PLUSPLUS = 25;
  /** RegularExpression Id. */
  int PLUS = 26;
  /** RegularExpression Id. */
  int MINUSMINUS = 27;
  /** RegularExpression Id. */
  int MINUS = 28;
  /** RegularExpression Id. */
  int MUL = 29;
  /** RegularExpression Id. */
  int DIV = 30;
  /** RegularExpression Id. */
  int MODULUS = 31;
  /** RegularExpression Id. */
  int ASSIGN = 32;
  /** RegularExpression Id. */
  int LEX_TRUE = 33;
  /** RegularExpression Id. */
  int LEX_FALSE = 34;
  /** RegularExpression Id. */
  int LEX_NIL = 35;
  /** RegularExpression Id. */
  int LETTER = 36;
  /** RegularExpression Id. */
  int DIGIT = 37;
  /** RegularExpression Id. */
  int SIGN = 38;
  /** RegularExpression Id. */
  int EXPONENT = 39;
  /** RegularExpression Id. */
  int FLOATING_NUMBER = 40;
  /** RegularExpression Id. */
  int INT_NUMBER = 41;
  /** RegularExpression Id. */
  int IDENTIFIER = 42;
  /** RegularExpression Id. */
  int ESCAPE_CHAR = 43;
  /** RegularExpression Id. */
  int SIMPLE_QUOTE_LITERAL = 44;
  /** RegularExpression Id. */
  int DOUBLE_QUOTE_LITERAL = 45;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int INSIDE_COMMENT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 8>",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\":\"",
    "\"?\"",
    "\"!\"",
    "\".\"",
    "\",\"",
    "\"==\"",
    "\"!=\"",
    "\"<=\"",
    "\">=\"",
    "\"<\"",
    "\">\"",
    "\"++\"",
    "\"+\"",
    "\"--\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"=\"",
    "\"true\"",
    "\"false\"",
    "\"nil\"",
    "<LETTER>",
    "<DIGIT>",
    "<SIGN>",
    "<EXPONENT>",
    "<FLOATING_NUMBER>",
    "<INT_NUMBER>",
    "<IDENTIFIER>",
    "<ESCAPE_CHAR>",
    "<SIMPLE_QUOTE_LITERAL>",
    "<DOUBLE_QUOTE_LITERAL>",
  };

}
