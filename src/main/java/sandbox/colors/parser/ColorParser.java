/* ColorParser.java */
/* Generated By:JavaCC: Do not edit this line. ColorParser.java */
package sandbox.colors.parser;
import sandbox.colors.Color;
import sandbox.colors.NamedColors;
import com.beust.jcommander.IStringConverter;
import java.util.*;
import java.io.*;

@SuppressWarnings("unchecked")
public class ColorParser implements ColorParserConstants {
public static final String OPT_DESC = "";
public static class Converter implements IStringConverter<Color> {
        @Override
        public Color convert(String str) {
                return Color.parse(str);
                }
        }


private static Color create(int r,int g,int b) {
        return Color.create(r,g,b);
        }

private static Color create(int r,int g,int b,int a) {
        return Color.create(r,g,b,a);
        }

private static int f2i(float f) {
    return (int)(f*255);
    }

public static Color parse(final String s)
        {
        try
                {
                final StringReader sr=new StringReader(s);
                return new ColorParser(sr).input();

                }
        catch(final Throwable err)
                {
                throw new IllegalArgumentException(err);
                }
        }

public static void main(String args[])  throws Exception
        {
        for(String arg:args)
                {
                Color c=parse(arg);
                if(c==null)
                        {
                        System.out.println("null");
                        continue;
                        }
                System.out.println("rgba("+c.getRed()+","+c.getGreen()+","+c.getBlue()+","+c.getAlpha()+")");
                }
        }

  final private Color input() throws ParseException {Color c;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NAMED:{
      c = namedcolor();
      break;
      }
    case RGBA:
    case RGB:{
      c = rgbcolor();
      break;
      }
    case HEXA:{
      c = hexaColor();
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(0);
{if ("" != null) return c;}
    throw new Error("Missing return statement in function");
}

  final private Color rgbcolor() throws ParseException {int r,g=-1,b=-1,a=255; float fr,fg=-1f,fb=-1f,fa=1.0f; Color c;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RGB:{
      jj_consume_token(RGB);
      break;
      }
    case RGBA:{
      jj_consume_token(RGBA);
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LPAR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT_NUMBER:{
      r = int255();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        jj_consume_token(COMMA);
        g = int255();
        jj_consume_token(COMMA);
        b = int255();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          jj_consume_token(COMMA);
          a = int255();
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        ;
      }
if(b==-1) c=create(r,r,r); else c=create(r,g,b,a);
      break;
      }
    case FLOATING_NUMBER:{
      fr = float1();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        jj_consume_token(COMMA);
        fg = float1();
        jj_consume_token(COMMA);
        fb = float1();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          jj_consume_token(COMMA);
          fa = float1();
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        ;
      }
if(fg==-1f) c=create(f2i(fr),f2i(fr),f2i(fr)); else c= create(f2i(fr),f2i(fg),f2i(fb),f2i(fa));
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RPAR);
{if ("" != null) return c;}
    throw new Error("Missing return statement in function");
}

  final private int int255() throws ParseException {Token t;
    t = jj_consume_token(INT_NUMBER);
{if ("" != null) return Math.min(255,Math.max(0,Integer.parseInt(t.image)));}
    throw new Error("Missing return statement in function");
}

  final private float float1() throws ParseException {Token t;
    t = jj_consume_token(FLOATING_NUMBER);
{if ("" != null) return Math.min(1.0f,Math.max(0.0f,Float.parseFloat(t.image)));}
    throw new Error("Missing return statement in function");
}

  final private Color hexaColor() throws ParseException {Token t;
    t = jj_consume_token(HEXA);
{if ("" != null) return Color.of( Integer.valueOf(t.image.substring(1),16) );}
    throw new Error("Missing return statement in function");
}

  final private Color namedcolor() throws ParseException {Token t;
    t = jj_consume_token(NAMED);
final String s = t.image;
            final java.util.function.Supplier<Throwable> ex = new java.util.function.Supplier<Throwable>() {
                @Override
                public Throwable get() {
                    {if ("" != null) return new RuntimeException("cannot convert '"+s+"' to color");}
                    }
                };
            {if ("" != null) return NamedColors.getInstance().findByName(s).orElseThrow(ex);}
    throw new Error("Missing return statement in function");
}

  /** Generated Token Manager. */
  public ColorParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[7];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x43800,0x3000,0x10000,0x10000,0x10000,0x10000,0x300,};
	}

  /** Constructor with InputStream. */
  public ColorParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ColorParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new ColorParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ColorParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new ColorParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new ColorParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ColorParser(ColorParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ColorParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[19];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 7; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 19; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
