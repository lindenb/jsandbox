/* LispParser.java */
/* Generated By:JavaCC: Do not edit this line. LispParser.java */
package sandbox.lisp;
import java.util.List;
import java.util.AbstractList;
import java.util.ArrayList;
import java.math.BigDecimal;
import java.math.BigInteger;
import sandbox.lang.StringUtils;


@SuppressWarnings("unchecked")
public class LispParser implements LispParserConstants {

public static class Atom  implements CharSequence {
        private final String s;
        public Atom(String s) {
                this.s= s;
                }
        @Override
        public CharSequence subSequence(int start, int end) {
                return s.subSequence(start, end);
                }
        @Override
        public int length() {
                return s.length();
                }
        @Override
        public char charAt(int index) {
                return s.charAt(index);
                }
        @Override
        public boolean equals(Object o) {
                if(o==this) return true;
                if(o==null || !(o instanceof Atom)) return false;
                return Atom.class.cast(o).s.equals(this.s);
                }
        @Override
        public int hashCode() {
                return s.hashCode();
                }
        @Override
        public String toString() {
                return s;
                }
        }

public static class LispNodeImpl extends AbstractList<Object> implements LispNode {
        private final String name;
        private final List<Object> delegate;

        LispNodeImpl(final String name) {
                this.name= name;
                this.delegate =  new ArrayList<Object>();
                }
        LispNodeImpl(final String name,final List<Object> L) {
                this.name= name;
                this.delegate =  new ArrayList<Object>(L);
                }

        @Override
        public String getName() {
                return name;
                }
        @Override public int size() { return delegate.size();}
        @Override public Object get(int i) { return delegate.get(i);}
        }



private String toLocation(final Token t) {
        return "line "+t.beginLine+" column "+t.beginColumn+(t.beginColumn==t.endColumn?"":"-"+t.endColumn);
        }

  final public LispNode any() throws ParseException {LispNode n=null;Token t=null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPAR:{
      n = listNode();
      break;
      }
    case QOPAR:{
      n = quotedListNode();
      break;
      }
    case 0:{
      jj_consume_token(0);
{if ("" != null) return null;}
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
}

  final private LispNode quotedListNode() throws ParseException {LispNodeImpl L= new LispNodeImpl("list");Object n1;
    jj_consume_token(QOPAR);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 0:
      case QOPAR:
      case OPAR:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      n1 = any();
L.delegate.add(n1);
    }
    jj_consume_token(CPAR);
{if ("" != null) return L;}
    throw new Error("Missing return statement in function");
}

  final private LispNode listNode() throws ParseException {LispNodeImpl L=null;Atom name;LispNode n1=null;LispNode n2=null;
    jj_consume_token(OPAR);
    name = symbol();
L=new LispNodeImpl(name.toString());
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 0:
      case QOPAR:
      case OPAR:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      n1 = any();
L.delegate.add(n1);
    }
    jj_consume_token(CPAR);
{if ("" != null) return L;}
    throw new Error("Missing return statement in function");
}

  final private Object atomNode() throws ParseException {Token t;Atom s;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LEX_TRUE:{
      t = jj_consume_token(LEX_TRUE);
{if ("" != null) return Boolean.TRUE;}
      break;
      }
    case LEX_FALSE:{
      t = jj_consume_token(LEX_FALSE);
{if ("" != null) return Boolean.FALSE;}
      break;
      }
    case LEX_NIL:{
      t = jj_consume_token(LEX_NIL);
{if ("" != null) return null;}
      break;
      }
    case INT_NUMBER:{
      t = jj_consume_token(INT_NUMBER);
{if ("" != null) return new BigInteger(t.image);}
      break;
      }
    case FLOATING_NUMBER:{
      t = jj_consume_token(FLOATING_NUMBER);
{if ("" != null) return new BigDecimal(t.image);}
      break;
      }
    case SIMPLE_QUOTE_LITERAL:{
      t = jj_consume_token(SIMPLE_QUOTE_LITERAL);
{if ("" != null) return StringUtils.unquote(t.image);}
      break;
      }
    case DOUBLE_QUOTE_LITERAL:{
      t = jj_consume_token(DOUBLE_QUOTE_LITERAL);
{if ("" != null) return StringUtils.unquote(t.image);}
      break;
      }
    case SYMBOL:{
      s = symbol();
{if ("" != null) return s;}
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final private Atom symbol() throws ParseException {Token t;
    t = jj_consume_token(SYMBOL);
{if ("" != null) return new Atom(t.image);}
    throw new Error("Missing return statement in function");
}

  /** Generated Token Manager. */
  public LispParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[4];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0xc1,0xc1,0xc1,0x8d83800,};
	}

  /** Constructor with InputStream. */
  public LispParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public LispParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new LispParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public LispParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new LispParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new LispParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public LispParser(LispParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(LispParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[28];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 4; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 28; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
