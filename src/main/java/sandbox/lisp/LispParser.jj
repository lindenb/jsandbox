options {
STATIC=false;
KEEP_LINE_COLUMN = true;
//LOOKAHEAD = 3; // (JavaCC - default 1)
DEBUG_PARSER = false; // (JavaCC - default false)
DEBUG_TOKEN_MANAGER = false; // (JavaCC - default false)
}

// https://github.com/bkiers/Curta/blob/master/src/main/jjtree/CurtaParser.jjt
PARSER_BEGIN(LispParser)

package sandbox.lisp;
import java.util.List;
import java.util.AbstractList;
import java.util.ArrayList;
import java.math.BigDecimal;
import java.math.BigInteger;
import sandbox.lang.StringUtils;

    
@SuppressWarnings("unchecked")
public class LispParser {

public static class Atom  implements CharSequence {
	private final String s;
	public Atom(String s) {
		this.s= s;
		}
	@Override
	public CharSequence subSequence(int start, int end) {
		return s.subSequence(start, end);
		}
	@Override
	public int length() {
		return s.length();
		}
	@Override
	public char charAt(int index) {
		return s.charAt(index);
		}
	@Override
	public boolean equals(Object o) {
		if(o==this) return true;
		if(o==null || !(o instanceof Atom)) return false;
		return Atom.class.cast(o).s.equals(this.s);
		}
	@Override
	public int hashCode() {
		return s.hashCode();
		}
	@Override
	public String toString() {
		return s;
		}
	}

public static class LispNodeImpl extends AbstractList<Object> implements LispNode {
	private final String name;
	private final List<Object> delegate;
	
	LispNodeImpl(final String name) {
		this.name= name;
		this.delegate =  new ArrayList<Object>();
		}
	LispNodeImpl(final String name,final List<Object> L) {
		this.name= name;
		this.delegate =  new ArrayList<Object>(L);
		}
	
	@Override
	public String getName() {
		return name;
		}
	@Override public int size() { return delegate.size();}
	@Override public Object get(int i) { return delegate.get(i);}
	}



private String toLocation(final Token t) {
	return "line "+t.beginLine+" column "+t.beginColumn+(t.beginColumn==t.endColumn?"":"-"+t.endColumn);
	}

}

PARSER_END(LispParser)

SKIP :
{
" "
| "\t"
| "\n"
| "\r"
| <";" (~["\n"])* "\n">
}

TOKEN : /* LITERALS */
{
  <QOPAR:"'(">
| <OPAR:"(">
| <CPAR:")">
| <OARRAY:"[">
| <CARRAY:"]">
| <LEX_TRUE: "#t">
| <LEX_FALSE: "#f">
| <LEX_NIL: "null">
| <#LETTER: ["_","a"-"z","A"-"Z"] >
| <#DIGIT: ["0"-"9"] >
| <#SIGN: ["-","+"]>
| < DOT : "." >
| <#EXPONENT: ("E"|"e") (<SIGN>)? (<DIGIT>)+ >
| <FLOATING_NUMBER: (<DIGIT>)* "." (<DIGIT>)* (<EXPONENT>)?
| (<DIGIT>)+ (<EXPONENT>) >
| <INT_NUMBER: (<DIGIT>)+ >
| <#ESCAPE_CHAR: "\\" ["n","t","b","r","f","\\","'","\""] >
| <SIMPLE_QUOTE_LITERAL: "\'" ( (~["\'","\\","\n","\r"]) | <ESCAPE_CHAR> )* "\'" >
| <DOUBLE_QUOTE_LITERAL: "\"" ( (~["\"","\\","\n","\r"]) | <ESCAPE_CHAR> )*"\"" >
| <#OTHER: ~["'","(",")","[","]"," ","\n","\r"] >
| <#OTHERS: < OTHER > (< OTHER >)* >
| <QSYMBOL: "'" < OTHERS > >
| <SYMBOL: <OTHERS > > 
}


LispNode any(): {LispNode n=null;Token t=null;} {
	(
	  n = listNode()
	| n= quotedListNode()
	| < EOF > { return null; }	) {
	return n;
	}
	}

private LispNode quotedListNode(): {LispNodeImpl L= new LispNodeImpl("list");Object n1;} {
	  < QOPAR > (n1=any() {L.delegate.add(n1);} )* <CPAR > {
		return L;
		}
	}

private LispNode listNode(): {LispNodeImpl L=null;Atom name;LispNode n1=null;LispNode n2=null;} {	  < OPAR > name=symbol() {L=new LispNodeImpl(name.toString());}  (n1=any() {L.delegate.add(n1);} )* <CPAR > {
	    return L;
		}
	}


private Object atomNode(): { Token t;Atom s;}
	{
	( t=<LEX_TRUE>{
		return Boolean.TRUE;
		}
	| t=<LEX_FALSE> {
		return Boolean.FALSE;
		}
	| t=<LEX_NIL>{
		return null;
		}
	| t = <INT_NUMBER> {
		return new BigInteger(t.image);
		}
	| t= <FLOATING_NUMBER> {
		return new BigDecimal(t.image);
		}
	| t= <SIMPLE_QUOTE_LITERAL> {
		return StringUtils.unquote(t.image);
		}
	| t= <DOUBLE_QUOTE_LITERAL> {
		return StringUtils.unquote(t.image);
		}
	| s=symbol() {
		return s;
		}
	)
	}
	
private Atom symbol() : {Token t;}
	{
	t = <SYMBOL> {return new Atom(t.image);}
	}


