options {
	STATIC=false;
	DEBUG_TOKEN_MANAGER=false;
	DEBUG_PARSER=false;
	IGNORE_CASE=true;
	}
PARSER_BEGIN(RDFExprParser)
/**


java -cp ~/packages/javacc/target/javacc.jar  javacc RDFExprParser.jj
 java -cp ~/package/javacc/javacc-javacc-7.0.12/target/javacc.jar  javacc RDFExprParser.jj
 
**/

package sandbox.jena.expr;
import java.util.*;
import java.io.*;
import org.apache.jena.rdf.model.*;
import org.apache.jena.util.iterator.*;
import java.math.BigInteger;
import java.math.BigDecimal;

@SuppressWarnings("unused")
public class RDFExprParser
	{
	private static final Resource ANY_RSRC = ResourceFactory.createResource("https://github.com/lindenb/jsandbox/jena/expr/any-rsrc");

        private static abstract class DelegateIterator  extends NiceIterator {
                protected final ExtendedIterator delegate;
                protected Object curr = null;
                DelegateIterator(ExtendedIterator delegate) {
                        this.delegate=delegate;
                        }
                public boolean hasNext() {
                        if(this.curr==null) {
                                this.curr = advance();
                                }
                        return curr!=null;
                        }
                @Override
                public Object next() {
                        if(this.curr!=null) {
                        	Object o = this.curr;
                                this.curr=null;
                                return o;
                                }
                        Object o = advance();
                        if(o==null) throw new IllegalStateException("no next");
                        return o;
                        }
                protected abstract Object advance();
                @Override
                public void close() {
                        delegate.close();
                        curr=null;
                        }
                }

        private static class EmptyIterator  extends NiceIterator {
                        public boolean hasNext() { return false;}
                        @Override
                        public Object next() {throw new IllegalStateException("no next");}
                        }

        private static class LimitIterator extends DelegateIterator {
                private final long limit;
                private long count=0L;
                LimitIterator( ExtendedIterator delegate,long limit) {
                        super(delegate);
                        this.limit = limit;
                        }
                @Override
                protected Object advance() {
                        if(count>= limit || !delegate.hasNext()) return null;
                        ++count;
                        return delegate.next();
                        }
                }

        
        private static class ObjectExtractor extends DelegateIterator  {
        	ObjectExtractor( ExtendedIterator delegate) {
        		super(delegate);
        		}
        	@Override
        	protected Object advance() {
	        	Object o = advance();
	        	if(o==null) return null;
	        	if(o instanceof Statement) return Statement.class.cast(o).getSubject();
	        	if(o instanceof RDFNode) return RDFNode.class;
        		throw new IllegalArgumentException("can extract object from "+o.getClass()+"="+o);
	        	}
        	}

		private static class PropertyExtractor extends DelegateIterator  {
        	PropertyExtractor( ExtendedIterator delegate) {
        		super(delegate);
        		}
        	@Override
        	protected Object advance() {
	        	Object o = advance();
	        	if(o==null) return null;
	        	if(o instanceof Statement) return Statement.class.cast(o).getSubject();
	        	if(o instanceof Property) return Property.class.cast(o);
        		throw new IllegalArgumentException("can extract property from "+o.getClass()+"="+o);
	        	}
        	}


	public static interface Context {
		public Model getModel();
		public Object getCurrent();
		public Object getVariable(final String varName);
		};
	
	private Context context;
	
	protected Context getContext() {
		return this.context;
		}
	 public static String valueOf(Context ctx,final String query) {
    	try(StringReader r= new StringReader(query)) {
    		final RDFExprParser parser = new RDFExprParser(ctx,r);
    		return parser.asCharacter();
    		}
    	catch(Throwable err) {
    		throw new IllegalArgumentException(err);
    		}
    	}
    public static ExtendedIterator iterator(Context ctx,final String query) {
    	try(StringReader r= new StringReader(query)) {
    		final RDFExprParser parser = new RDFExprParser(ctx,r);
    		return parser.iterator();
    		}
    	catch(Throwable err) {
    		throw new IllegalArgumentException(err);
    		}
    	}
    
    private RDFExprParser(Context context,final Reader r) {
    	this(r);
    	this.context = context;
    }

	
	}	
PARSER_END(RDFExprParser)

SKIP:{
 " "
|"\t"
|"\n"
| <"--" (~["\n"])* "\n">
| <"/*" (~["\n"])* "*/">
}

TOKEN:
{
  <LIST: "list">
| <FIRST: "first">
| <TRUE: "true">
| <FALSE: "false">
| <SUBJECT_OF: "subject-of">
| <PROPERTY_OF: "property-of">
| <OBJECT_OF: "object-of">
| <LIMIT: "limit">
| <#LETTER:(["a"-"z"]|["A"-"Z"]|"_")>
| <#DIGIT:["0"-"9"]>
| <INT: <DIGIT>(<DIGIT>)* >
| <#EXPONENT: (["e","E"] (["+","-"])? (<INT>)+) >
| <DECIMAL_LITERAL: (<INT> (["."]<INT>)? (<EXPONENT>)? ) >
| <IDENTIFIER1: <LETTER> (<DIGIT>|<LETTER>)*  >
| <IDENTIFIER2: "`"(<IDENTIFIER1>) "`" >
| <QNAME: <IDENTIFIER1> ":" <IDENTIFIER1>>
| <URI: "<"  (~["\'","\\","\n","\r",">","<"])*  ">" >
| <VARIABLE: "@"("@")?<IDENTIFIER1> >
| <STAR:"*">
| <LPAR:"(">
| <RPAR:")">
| <COMMA:",">
| <DOT:".">
| <#ESCAPE_CHAR: "\\" ["n","t","b","r","f","\\","'","\""] >
| <SIMPLE_QUOTE_LITERAL: "\'"( (~["\'","\\","\n","\r"])| <ESCAPE_CHAR>)* "\'">
| <DOUBLE_QUOTE_LITERAL: "\""( (~["\'","\\","\n","\r"])| <ESCAPE_CHAR>)* "\"">
}


private String asCharacter(): {Object o;}
	{
	o=atom() {
		return o.toString();
		}
	}

private ExtendedIterator iterator(): {Object s,p,o;BigInteger bi;ExtendedIterator<?> delegate;}
	{
	(
	<OBJECT_OF> <LPAR> delegate=iterator() <RPAR> {
		return new ObjectExtractor(delegate);
		}
	| <PROPERTY_OF> <LPAR> delegate=iterator() <RPAR> {
		return new PropertyExtractor(delegate);
		}
	| <LIMIT> <LPAR> delegate=iterator() <COMMA> bi=bigInteger() <RPAR> {
		return new LimitIterator(delegate,bi.longValue());
		}
	| <LIST> <LPAR> s=atom() <COMMA> p=atom() <COMMA> o=atom() <RPAR> {
		/** set subject */
		final Resource ss;
		if(s==null) throw new IllegalArgumentException("subject is null");
		if(s.equals(ANY_RSRC))
			{
			ss=null;
			}
		else if(s instanceof Resource)
			{
			ss = Resource.class.cast(s);
			}
		else
			{
			throw new IllegalArgumentException("subject is not a resource : "+s);
			}

		/** set predicate */
		final Property sp;
		if(p==null) throw new IllegalArgumentException("predicate is null");
		if(p.equals(ANY_RSRC))
			{
			sp=null;
			}
		else if(p instanceof Property)
			{
			sp = Property.class.cast(s);
			}
		else if(p instanceof Resource)
			{
			sp = ResourceFactory.createProperty(Resource.class.cast(p).getURI());
			}
		else
			{
			throw new IllegalArgumentException("predicate is not a property : "+p);
			}
		/** set object */
		final RDFNode so;
		final Set<RDFNode> so_set = null;
		if(o==null) throw new IllegalArgumentException("object is null");
		if(o.equals(ANY_RSRC))
			{
			so = null;
			}
		else if(o instanceof RDFNode)
			{
			so = RDFNode.class.cast(s);
			}
		else if((o instanceof Number) || (o instanceof String) || (o instanceof Boolean) ) {
			so = ResourceFactory.createTypedLiteral(o);
			}
		else if(o instanceof Iterator) {
			
			so_set = new HashSet<>();
			final Iterator r2 = Iterator.class.cast(o);
			while(!r2.hasNext()) {
				final Object o2 = r2.next();
				if(!(o2 instanceof RDFNode)) throw new IllegalArgumentException("object is not a rdfnode : "+ o2);
				so_set.add(o2);
				}
			if(r2 instanceof ExtendedIterator) ExtendedIterator.class.cast(r2).close();
			if(so_set.size()==1) {
				so = so_set.iterator().next();
				so_set = null;
				}
			else
				{
				so = null;
				}
			}
		else
			{
			throw new IllegalArgumentException("object is not a rdfnode : "+ o);
			}
		
		final Selector selector = new SimpleSelector(ss,sp,so);
		final StmtIterator stmtIter= getContext().getModel().listStatements(selector);
		if(so==null && so_set!=null) {
			final Set<RDFNode> final_so_set = so_set;
			return stmtIter.filterKeep(new Predicate<Statement>() {
					@Override
					public boolean test(final Statement stmt) {
						return final_so_set.contains(stmt.getObject());
						}
					});
			}
		return stmtIter;
		}
	)
	}

private Object  atom():{Object o;}
	{
	(o=uri()|o=qname()|o=primitive()|o=star()|o=dot()|o=objectOf()|o=propertyOf()) {
		return o;
		}
	}

private RDFNode objectOf():{Object o;}
	{
	<OBJECT_OF> <LPAR> o=atom() <RPAR> {
		if(o instanceof Statement) return Statement.class.cast(o).getObject();
		if(o instanceof RDFNode) return RDFNode.class.cast(o);
		throw new IllegalArgumentException("object is not a rdfnode : "+ o);
		}
	}

private Property propertyOf():{Object o;}
	{
	<PROPERTY_OF> <LPAR> o=atom() <RPAR> {
		if(o instanceof Statement) return Statement.class.cast(o).getPredicate();
		if(o instanceof Property) return Property.class.cast(o);
		throw new IllegalArgumentException("object is not a property : "+ o);
		}
	}


private RDFNode qname(): {Token t;}
	{
	t=<QNAME> {
		final String s = t.image;
		final String uri = getContext().getModel().expandPrefix(s);
		return getContext().getModel().createResource(uri);
		}
	}

private RDFNode uri(): {Token t;}
	{
	t=<URI> {
		final String uri = t.image;
		return  getContext().getModel().createResource(uri.substring(1,uri.length()-1));
		}
	}

private Object primitive():{Object o;}
	{
	(o=string()|o=bool()|o=number()) {
		return o;
		}
	}

private Boolean bool(): {}
	{
	(<TRUE> { return Boolean.TRUE;} |
	<FALSE> { return Boolean.FALSE;})
	}

private Number number():{Number o;}
	{
	(o=bigDecimal()|o=bigInteger()) {
		return o;
		}
	} 

 
private BigDecimal bigDecimal():{Token t;}
	{
	t=<DECIMAL_LITERAL> {
		return new BigDecimal(t.image);
		}
	} 
private BigInteger bigInteger():{Token t;}
	{
	t=<INT> {
		return new BigInteger(t.image);
		}
	}
 
private String string():{Token t;}
	{
	(t=<SIMPLE_QUOTE_LITERAL>|t=<DOUBLE_QUOTE_LITERAL>) {
		return t.image;
		}
	}
	
private Object dot():{}
	{
	<DOT> 	{
		return getContext().getCurrent();
		}
	}
private RDFNode star():{}
	{
	<STAR> {
		return ANY_RSRC;
		}
	}