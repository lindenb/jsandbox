/* StreamPlotParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. StreamPlotParserTokenManager.java */
package sandbox.tools.streamplot.parser;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.AbstractMap;
import java.math.BigDecimal;
import java.math.BigInteger;
import sandbox.graphics.Canvas;
import sandbox.util.function.FunctionalMap;

/** Token Manager. */
@SuppressWarnings ("unused")
public class StreamPlotParserTokenManager implements StreamPlotParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x40000L) != 0L)
            return 44;
         if ((active0 & 0x20000040L) != 0L)
            return 0;
         if ((active2 & 0x2000000e00000L) != 0L)
         {
            jjmatchedKind = 197;
            return 24;
         }
         if ((active0 & 0xffffffffc0000000L) != 0L || (active1 & 0xffffffffffffffffL) != 0L || (active2 & 0x3f75ffffff1fffffL) != 0L)
         {
            jjmatchedKind = 197;
            return 10;
         }
         return -1;
      case 1:
         if ((active2 & 0x200000L) != 0L)
         {
            jjmatchedKind = 197;
            jjmatchedPos = 1;
            return 23;
         }
         if ((active0 & 0xffffffffc0000000L) != 0L || (active1 & 0xffffffffffffffffL) != 0L || (active2 & 0x3f77ffffffdfffffL) != 0L)
         {
            jjmatchedKind = 197;
            jjmatchedPos = 1;
            return 10;
         }
         return -1;
      case 2:
         if ((active2 & 0x802004000200000L) != 0L)
            return 10;
         if ((active0 & 0xffffffffc0000000L) != 0L || (active1 & 0xffffffffffffffffL) != 0L || (active2 & 0x3775ffbfffdfffffL) != 0L)
         {
            jjmatchedKind = 197;
            jjmatchedPos = 2;
            return 10;
         }
         return -1;
      case 3:
         if ((active0 & 0x4018300000000L) != 0L || (active1 & 0x70000004e0000L) != 0L || (active2 & 0x324008800070008L) != 0L)
            return 10;
         if ((active0 & 0xfffbfe7cc0000000L) != 0L || (active1 & 0xfff8ffffffb1ffffL) != 0L || (active2 & 0x3451ff37ffd8fff7L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 197;
               jjmatchedPos = 3;
            }
            return 10;
         }
         return -1;
      case 4:
         if ((active0 & 0x422c00000000L) != 0L || (active1 & 0x4000018300000L) != 0L || (active2 & 0x1400700000000060L) != 0L)
            return 10;
         if ((active0 & 0xfffbbd52c0000000L) != 0L || (active1 & 0xfffaffffe785ffffL) != 0L || (active2 & 0x20518f37ffd8ff97L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 197;
               jjmatchedPos = 4;
            }
            return 10;
         }
         return -1;
      case 5:
         if ((active0 & 0x1000000000L) != 0L || (active1 & 0x10000004000000L) != 0L || (active2 & 0x20118a0062100380L) != 0L)
            return 10;
         if ((active0 & 0xfffbbd42c0000000L) != 0L || (active1 & 0xffeaffffe3a5ffffL) != 0L || (active2 & 0x4045379dc8fc57L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 197;
               jjmatchedPos = 5;
            }
            return 10;
         }
         return -1;
      case 6:
         if ((active0 & 0x4002000000000000L) != 0L || (active1 & 0x8000001004300L) != 0L || (active2 & 0x40010080000010L) != 0L)
            return 10;
         if ((active0 & 0xbff9bd42c0000000L) != 0L || (active1 & 0xffe2ffffe2a5bcffL) != 0L || (active2 & 0x144371dc8fd47L) != 0L)
         {
            jjmatchedKind = 197;
            jjmatchedPos = 6;
            return 10;
         }
         return -1;
      case 7:
         if ((active0 & 0x159000000000000L) != 0L || (active1 & 0x60800040L) != 0L || (active2 & 0x18000002L) != 0L)
            return 10;
         if ((active0 & 0xbea0bd42c0000000L) != 0L || (active1 & 0xffe2ffff8225bcbfL) != 0L || (active2 & 0x1443705c8fd45L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 197;
               jjmatchedPos = 7;
            }
            return 10;
         }
         return -1;
      case 8:
         if ((active0 & 0xbc20914280000000L) != 0L || (active1 & 0x7fe0fe55402134bfL) != 0L || (active2 & 0x1401005087404L) != 0L)
         {
            jjmatchedKind = 197;
            jjmatchedPos = 8;
            return 10;
         }
         if ((active0 & 0x2802c0040000000L) != 0L || (active1 & 0x800201aa82048800L) != 0L || (active2 & 0x42700c08941L) != 0L)
            return 10;
         return -1;
      case 9:
         if ((active0 & 0xb000110200000000L) != 0L || (active1 & 0x40004400010420L) != 0L || (active2 & 0x400004084000L) != 0L)
            return 10;
         if ((active0 & 0xc20804080000000L) != 0L || (active1 & 0x7fa0fe114020309fL) != 0L || (active2 & 0x1001001003404L) != 0L)
         {
            jjmatchedKind = 197;
            jjmatchedPos = 9;
            return 10;
         }
         return -1;
      case 10:
         if ((active0 & 0x400000000000000L) != 0L || (active1 & 0x820000203080L) != 0L || (active2 & 0x1001001000004L) != 0L)
            return 10;
         if ((active0 & 0x820804080000000L) != 0L || (active1 & 0x7fa07c114000001fL) != 0L || (active2 & 0x3400L) != 0L)
         {
            jjmatchedKind = 197;
            jjmatchedPos = 10;
            return 10;
         }
         return -1;
      case 11:
         if ((active0 & 0x80000000L) != 0L || (active1 & 0x4180080100000001L) != 0L)
            return 10;
         if ((active0 & 0x820804000000000L) != 0L || (active1 & 0x3e2074104000001eL) != 0L || (active2 & 0x3400L) != 0L)
         {
            jjmatchedKind = 197;
            jjmatchedPos = 11;
            return 10;
         }
         return -1;
      case 12:
         if ((active0 & 0x20000000000000L) != 0L || (active1 & 0x4004000001eL) != 0L || (active2 & 0x3400L) != 0L)
            return 10;
         if ((active0 & 0x800804000000000L) != 0L || (active1 & 0x3e20701000000000L) != 0L)
         {
            jjmatchedKind = 197;
            jjmatchedPos = 12;
            return 10;
         }
         return -1;
      case 13:
         if ((active0 & 0x800804000000000L) != 0L || (active1 & 0x200700000000000L) != 0L)
            return 10;
         if ((active1 & 0x3c20001000000000L) != 0L)
         {
            jjmatchedKind = 197;
            jjmatchedPos = 13;
            return 10;
         }
         return -1;
      case 14:
         if ((active1 & 0x3400000000000000L) != 0L)
            return 10;
         if ((active1 & 0x820001000000000L) != 0L)
         {
            jjmatchedKind = 197;
            jjmatchedPos = 14;
            return 10;
         }
         return -1;
      case 15:
         if ((active1 & 0x20000000000000L) != 0L)
            return 10;
         if ((active1 & 0x800001000000000L) != 0L)
         {
            jjmatchedKind = 197;
            jjmatchedPos = 15;
            return 10;
         }
         return -1;
      case 16:
         if ((active1 & 0x800000000000000L) != 0L)
            return 10;
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 197;
            jjmatchedPos = 16;
            return 10;
         }
         return -1;
      case 17:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 197;
            jjmatchedPos = 17;
            return 10;
         }
         return -1;
      case 18:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 197;
            jjmatchedPos = 18;
            return 10;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L, 0x0L);
      case 40:
         return jjStopAtPos(0, 9);
      case 41:
         return jjStopAtPos(0, 10);
      case 42:
         return jjStopAtPos(0, 28);
      case 43:
         return jjStopAtPos(0, 26);
      case 44:
         return jjStopAtPos(0, 19);
      case 45:
         return jjStopAtPos(0, 27);
      case 46:
         return jjStartNfaWithStates_0(0, 18, 44);
      case 47:
         jjmatchedKind = 29;
         return jjMoveStringLiteralDfa1_0(0x40L, 0x0L, 0x0L);
      case 58:
         return jjStopAtPos(0, 16);
      case 59:
         return jjStopAtPos(0, 15);
      case 60:
         jjmatchedKind = 24;
         return jjMoveStringLiteralDfa1_0(0x400000L, 0x0L, 0x0L);
      case 61:
         jjmatchedKind = 183;
         return jjMoveStringLiteralDfa1_0(0x100000L, 0x0L, 0x0L);
      case 62:
         jjmatchedKind = 25;
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x0L, 0x0L);
      case 63:
         return jjStopAtPos(0, 17);
      case 91:
         return jjStopAtPos(0, 13);
      case 93:
         return jjStopAtPos(0, 14);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x7c0000000L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x7f800000000L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x7f80000000000L, 0x0L, 0x10000000000000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0xfff8000000000000L, 0x7ffL, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7800L, 0x400000000000000L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7f8000L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1800000L, 0x2040000000000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe000000L, 0x0L);
      case 107:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7ffffe0000000L, 0x4000000000000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfff8000000000000L, 0x3L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x80000000000000cL);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3f0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1ffc00L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2000000e00000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3fff000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x22007c000000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x80000000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1100700000000000L);
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1800000000000L);
      case 123:
         return jjStopAtPos(0, 11);
      case 125:
         return jjStopAtPos(0, 12);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 61:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(1, 20);
         else if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(1, 21);
         else if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(1, 22);
         else if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0xfff8080000000000L, active1, 0x180000e000803fL, active2, 0x400004007007c0cL);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0x3fe00001000000c0L, active2, 0x2061808018218000L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x2000000000000L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x300000000000L, active1, 0x10010000L, active2, 0x710000000000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0xc007fffe00000b00L, active2, 0x1914080060020001L);
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x80000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x1e040000000L, active1, 0x1000L, active2, 0x700040070L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L, active1, 0x6000000L, active2, 0x800000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x1c00000000000L, active1, 0x1862400L, active2, 0x20000c80002L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x1000000000L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0x300000000L, active1, 0L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x2020000000000L, active1, 0x780000L, active2, 0x200000000000380L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x2000000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L, active1, 0x4000L, active2, 0x40000100000L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L, active1, 0L, active2, 0L);
      case 122:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x4106000000000L, active1, 0x10080000L, active2, 0x8718008180L);
      case 98:
         if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 177, 10);
         break;
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000L, active2, 0x202L);
      case 100:
         if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 149, 10);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0x7fe0000006000400L, active2, 0x1000000001000010L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x7000c0L, active2, 0x102020000000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8fffe00000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000840000000L, active1, 0x8000L, active2, 0x2000610000000060L);
      case 108:
         if ((active2 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 187, 10);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x60000L, active2, 0x401800042003c00L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x3000100000300L, active2, 0x20000000000L);
      case 110:
         if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 166, 10);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8004000000800000L, active2, 0x4000004020000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x220000000000L, active1, 0x8011000L, active2, 0x80800000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x4000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0xfff9c40000000000L, active1, 0x1000000000283fL, active2, 0x50041000110000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L, active1, 0L, active2, 0x400001L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L, active1, 0x1000000L, active2, 0x100000000000000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x18700000000L, active1, 0L, active2, 0x200000000040000L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x60000000L, active2, 0xcL);
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000000L, active2, 0x80000L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x20000000000000L);
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x80800000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x400200000000L, active1, 0L, active2, 0x120000804004L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x80000000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x202040000000L, active1, 0L, active2, 0x10000000008002L);
      case 100:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000L, active2, 0x5080000L);
      case 101:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 178;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 185, 10);
         return jjMoveStringLiteralDfa4_0(active0, 0x90000000000L, active1, 0xe000060b02800L, active2, 0x2000003c00L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L, active1, 0x700L, active2, 0x2000000008000000L);
      case 104:
         if ((active2 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 184, 10);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xfffe00004000L, active2, 0x200L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L, active1, 0x3fe0000006000000L, active2, 0x1000000000L);
      case 107:
         if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 145, 10);
         return jjMoveStringLiteralDfa4_0(active0, 0xfff8000000000000L, active1, 0x1000003fL, active2, 0L);
      case 108:
         if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 167, 10);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0L, active2, 0x1880000000010L);
      case 109:
         if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 146, 10);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L, active1, 0L, active2, 0x2000000L);
      case 110:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 50, 10);
         return jjMoveStringLiteralDfa4_0(active0, 0x1804000000000L, active1, 0x4000000080008000L, active2, 0x20000180L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000100000000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000c0L, active2, 0x100000L);
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L, active1, 0L, active2, 0x40000000000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x100400000000L, active1, 0x8001000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000L, active2, 0x440010010000000L);
      case 116:
         if ((active2 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 181, 10);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000000000000L, active2, 0x1000600700000001L);
      case 117:
         if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 144, 10);
         break;
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x40000060L);
      case 119:
         if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 163, 10);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L, active1, 0L, active2, 0L);
      case 121:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 83, 10);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 86, 10);
         else if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 131, 10);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2001000L, active2, 0x12L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L, active1, 0x800L, active2, 0x400000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x10004000000000L, active1, 0x8000000000000000L, active2, 0L);
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 34, 10);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 35, 10);
         else if ((active2 & 0x20L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 173;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 186, 10);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L, active1, 0x40400L, active2, 0x480740080040L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L, active1, 0L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x1e0000000000000L, active1, 0x2000084000000L, active2, 0xd80L);
      case 104:
         if ((active2 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 188, 10);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x2040000010008000L);
      case 105:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 92, 10);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000001000000L, active2, 0x200L);
      case 106:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x4L);
      case 107:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 37, 10);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L, active1, 0L, active2, 0L);
      case 108:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 46, 10);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x10002081900000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000200000000L, active1, 0L, active2, 0L);
      case 110:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 41, 10);
         else if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 114, 10);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000160200000L, active2, 0x1020000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x3800200000000000L, active1, 0x10000000000000L, active2, 0x1800002000000L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40L, active2, 0L);
      case 113:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L, active1, 0L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0x300L, active2, 0x8000000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x8003000000000000L, active1, 0xe08fL, active2, 0L);
      case 116:
         if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 172, 10);
         return jjMoveStringLiteralDfa5_0(active0, 0x180000000000L, active1, 0xfffe00010010L, active2, 0x30000001000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L, active1, 0x3fe0000000000000L, active2, 0x40000000000L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L, active1, 0x20L, active2, 0x2000L);
      case 121:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 91, 10);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L, active1, 0x800000L, active2, 0x4004001L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 157, 10);
         return jjMoveStringLiteralDfa6_0(active0, 0x8400000200000000L, active1, 0x100L, active2, 0x4000L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x80040000000L, active1, 0x200008000L, active2, 0x2104800000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0xd00000000L, active2, 0x10L);
      case 100:
         if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 137, 10);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x60800000L, active2, 0x40L);
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 36, 10);
         else if ((active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 148, 10);
         else if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 180, 10);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0x201L, active2, 0x40000019000100L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000f000000000L, active2, 0x1600000000L);
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x200004000000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x1010000000000L, active1, 0x4060L, active2, 0x2000L);
      case 107:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x808a00000000000L, active1, 0x100eL, active2, 0x10000000000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x3fe0000000000000L, active2, 0L);
      case 110:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 116, 10);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 153, 10);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x3040000L, active2, 0L);
      case 111:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 90, 10);
         else if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 169, 10);
         return jjMoveStringLiteralDfa6_0(active0, 0x22000000000000L, active1, 0L, active2, 0x40000000404L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000000000L, active2, 0x8000L);
      case 114:
         if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 158, 10);
         return jjMoveStringLiteralDfa6_0(active0, 0x31c0100000000000L, active1, 0x8002000080000c00L, active2, 0x480801L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x7e0000000000L, active2, 0x400000000002L);
      case 116:
         if ((active2 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 171, 10);
         else if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 189, 10);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000002000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L, active1, 0x10L, active2, 0x80001000L);
      case 119:
         if ((active2 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 175;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L, active1, 0x10000L, active2, 0x1000000000000L);
      case 121:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L, active1, 0x800000200000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 78, 10);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 115, 10);
         return jjMoveStringLiteralDfa7_0(active0, 0x1250200000000000L, active1, 0x2002000000000fL, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000000000400L, active2, 0x1080000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L);
      case 100:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 62, 10);
         break;
      case 101:
         if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 132, 10);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 159, 10);
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 168, 10);
         return jjMoveStringLiteralDfa7_0(active0, 0x180104080000000L, active1, 0x80028400e0a00000L, active2, 0x8000800L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000000L, active1, 0x2000L, active2, 0x1001000000000L);
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000100010000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000000L, active1, 0x10000000800L, active2, 0x40000000002L);
      case 107:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 88, 10);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x8021080040000000L, active1, 0x300200000000L, active2, 0x2110800400L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x400000000000L);
      case 110:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 49, 10);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x850000000000L, active1, 0x80001400008020L, active2, 0x402001L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000000000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L, active1, 0xe002040010L, active2, 0x604001140L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0xe00000000000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000400000000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000L, active1, 0L, active2, 0x8000L);
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000000000000L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000L, active2, 0x4004L);
      case 121:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 72, 10);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 73, 10);
         else if ((active2 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 182, 10);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800000080L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000342800000000L, active2, 0x200000040L);
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x800L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x20004000000000L, active1, 0L, active2, 0x400L);
      case 101:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 51, 10);
         return jjMoveStringLiteralDfa8_0(active0, 0x480000000000000L, active1, 0x20240c082000000L, active2, 0x400000900L);
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x8000L);
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000000L, active1, 0x1000L, active2, 0x4004L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000L, active1, 0x2000000100010000L, active2, 0L);
      case 107:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 48, 10);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 70, 10);
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000000L, active1, 0L, active2, 0L);
      case 108:
         if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(7, 156, 10);
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000L, active1, 0x440821000200420L, active2, 0x82000L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L);
      case 110:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 52, 10);
         else if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(7, 129, 10);
         else if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 155, 10);
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000000L, active1, 0x10000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000L, active1, 0x40000L, active2, 0x400004000000L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x800000000000000L, active2, 0L);
      case 113:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20000000000010L, active2, 0x1000L);
      case 114:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000044000a000L, active2, 0x1001001000000L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x40000000001L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000L, active1, 0x400000000000000eL, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x180040000000L, active1, 0x1100000200000000L, active2, 0x2100800000L);
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 119:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 87, 10);
         return jjMoveStringLiteralDfa8_0(active0, 0x800080000000L, active1, 0L, active2, 0x400000L);
      case 121:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 54, 10);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 56, 10);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000L, active1, 0x600000400000000L, active2, 0L);
      case 98:
         if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(8, 134, 10);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000080040000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80000000000000L, active2, 0L);
      case 100:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 42, 10);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(8, 82, 10);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(8, 89, 10);
         else if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(8, 136, 10);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1000000000L, active2, 0L);
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(8, 30, 10);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 43, 10);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 45, 10);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(8, 97, 10);
         else if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(8, 128, 10);
         else if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(8, 151, 10);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(8, 160, 10);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 165, 10);
         else if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 170, 10);
         return jjMoveStringLiteralDfa9_0(active0, 0x820810000000000L, active1, 0x40400000202eL, active2, 0x1001000002400L);
      case 102:
         if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(8, 143, 10);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x100000000L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000000L, active1, 0x40000000000L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000L, active1, 0L, active2, 0L);
      case 105:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 57, 10);
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000000L, active1, 0x1000L, active2, 0x4004L);
      case 107:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(8, 75, 10);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 104, 10);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x400000000000L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800000200080L, active2, 0L);
      case 109:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 127, 10);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000000000L, active2, 0L);
      case 110:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 55, 10);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(8, 95, 10);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(8, 99, 10);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 113, 10);
         else if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(8, 139, 10);
         else if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(8, 150, 10);
         return jjMoveStringLiteralDfa9_0(active0, 0x400000200000000L, active1, 0L, active2, 0L);
      case 111:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(8, 79, 10);
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000000L, active1, 0x2000000000000000L, active2, 0x1000000L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1900000000000001L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x300000010000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x60000000000410L, active2, 0x81000L);
      case 119:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x4000000L);
      case 121:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 101, 10);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 103, 10);
         else if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(8, 161, 10);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(8, 162, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20000000000000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2L, active2, 0L);
      case 100:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 61, 10);
         break;
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(9, 33, 10);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 44, 10);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 60, 10);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(9, 74, 10);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(9, 80, 10);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 118, 10);
         else if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(9, 147, 10);
         else if ((active2 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 174, 10);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x301000002001L, active2, 0x1001000000000L);
      case 102:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100000000L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000000000L, active1, 0x20000000000000cL, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x80000000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000L, active1, 0x800000000000000L, active2, 0L);
      case 108:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(9, 98, 10);
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000L, active1, 0x6000480040000000L, active2, 0L);
      case 110:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 63, 10);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 102, 10);
         else if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(9, 154, 10);
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000000000L, active1, 0L, active2, 0x400L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x820000200010L, active2, 0x1000L);
      case 112:
         if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(9, 142, 10);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100000000000000L, active2, 0L);
      case 113:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000000L, active1, 0x40000000000L, active2, 0L);
      case 116:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 40, 10);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(9, 69, 10);
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000000000L, active1, 0x400000000001000L, active2, 0x2004L);
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x80L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2);
      return 10;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 58, 10);
         break;
      case 98:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000000L, active1, 0x400000000000L, active2, 0L);
      case 101:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(10, 71, 10);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(10, 76, 10);
         else if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(10, 130, 10);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2400040000000001L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x300000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x80000000000010L, active2, 0x1000L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x100000000000002L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000L, active1, 0x20000000000000L, active2, 0L);
      case 110:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(10, 77, 10);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 105, 10);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(10, 152, 10);
         else if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 164, 10);
         else if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 176, 10);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x800001000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x100000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x820000000000000L, active1, 0x20000000000000cL, active2, 0x2400L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x5000080040000000L, active2, 0L);
      case 119:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(10, 85, 10);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 111, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2);
      return 11;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x20000000000004L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x400000000000000L, active2, 0L);
      case 100:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 119, 10);
         break;
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(11, 31, 10);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 107, 10);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 120, 10);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 126, 10);
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000000000L, active1, 0x200040000000008L, active2, 0x2000L);
      case 103:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x800000000000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000000L, active1, 0x400000000000L, active2, 0L);
      case 110:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(11, 64, 10);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(11, 96, 10);
         break;
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x20004000000000L, active1, 0x1000000000000000L, active2, 0x400L);
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x301000000000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x40000010L, active2, 0x1000L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x2000000000000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x2L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, active2);
      return 12;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      case 100:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 53, 10);
         else if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(12, 138, 10);
         else if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(12, 141, 10);
         break;
      case 101:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(12, 65, 10);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(12, 68, 10);
         else if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(12, 140, 10);
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000000000L, active1, 0x200200000000000L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x800000000000000L, active2, 0L);
      case 104:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(12, 94, 10);
         break;
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x400000000000000L, active2, 0L);
      case 110:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 106, 10);
         return jjMoveStringLiteralDfa13_0(active0, 0x4000000000L, active1, 0L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x1000000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x2020000000000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000000L, active1, 0x400000000000L, active2, 0L);
      case 121:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(12, 66, 10);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(12, 67, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, active2);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(11, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 38, 10);
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x1000000000L);
      case 101:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 47, 10);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 110, 10);
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x2000000000000000L);
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x20000000000000L);
      case 110:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 59, 10);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 121, 10);
         break;
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x800000000000000L);
      case 115:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x1000000000000000L);
      case 117:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x400000000000000L);
      case 121:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 108, 10);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 109, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 125, 10);
         break;
      case 101:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 122, 10);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 124, 10);
         return jjMoveStringLiteralDfa15_0(active1, 0x800000000000000L);
      case 110:
         return jjMoveStringLiteralDfa15_0(active1, 0x20000000000000L);
      case 121:
         return jjMoveStringLiteralDfa15_0(active1, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(13, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 117, 10);
         return jjMoveStringLiteralDfa16_0(active1, 0x800001000000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(14, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa17_0(active1, 0x1000000000L);
      case 110:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 123, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(15, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, active1, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa18_0(active1, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa18_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(16, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, active1, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa19_0(active1, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa19_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(17, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, active1, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 119:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(19, 100, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, active1, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 44;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 23:
               case 10:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 197)
                     kind = 197;
                  { jjCheckNAdd(10); }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 196)
                        kind = 196;
                     { jjCheckNAddStates(0, 7); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(8, 10); }
                  else if (curChar == 39)
                     { jjCheckNAddStates(11, 13); }
                  else if (curChar == 46)
                  {
                     if (kind > 195)
                        kind = 195;
                     { jjCheckNAddTwoStates(5, 6); }
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 24:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 197)
                     kind = 197;
                  { jjCheckNAdd(10); }
                  break;
               case 44:
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 195)
                     kind = 195;
                  { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 0:
                  if (curChar == 47)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 5;
                  break;
               case 4:
                  if (curChar != 46)
                     break;
                  if (kind > 195)
                     kind = 195;
                  { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 7:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(8); }
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 195)
                     kind = 195;
                  { jjCheckNAdd(8); }
                  break;
               case 11:
                  if (curChar == 39)
                     { jjCheckNAddStates(11, 13); }
                  break;
               case 12:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     { jjCheckNAddStates(11, 13); }
                  break;
               case 14:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(11, 13); }
                  break;
               case 15:
                  if (curChar == 39 && kind > 199)
                     kind = 199;
                  break;
               case 16:
                  if (curChar == 34)
                     { jjCheckNAddStates(8, 10); }
                  break;
               case 17:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(8, 10); }
                  break;
               case 19:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(8, 10); }
                  break;
               case 20:
                  if (curChar == 34 && kind > 200)
                     kind = 200;
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 196)
                     kind = 196;
                  { jjCheckNAddStates(0, 7); }
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(14, 16); }
                  break;
               case 35:
                  if (curChar == 46)
                     { jjCheckNAddTwoStates(36, 37); }
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(36, 37); }
                  break;
               case 37:
                  if (curChar == 37 && kind > 194)
                     kind = 194;
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(38, 4); }
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(39, 40); }
                  break;
               case 41:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(42); }
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 195)
                     kind = 195;
                  { jjCheckNAdd(42); }
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 196)
                     kind = 196;
                  { jjCheckNAdd(43); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 23:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 197)
                        kind = 197;
                     { jjCheckNAdd(10); }
                  }
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 30;
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 197)
                        kind = 197;
                     { jjCheckNAdd(10); }
                  }
                  if (curChar == 114)
                     { jjAddStates(17, 18); }
                  break;
               case 24:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 197)
                        kind = 197;
                     { jjCheckNAdd(10); }
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 31;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 44:
               case 6:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(19, 20); }
                  break;
               case 1:
                  { jjAddStates(21, 22); }
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 197)
                     kind = 197;
                  { jjCheckNAdd(10); }
                  break;
               case 10:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 197)
                     kind = 197;
                  { jjCheckNAdd(10); }
                  break;
               case 12:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(11, 13); }
                  break;
               case 13:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(11, 13); }
                  break;
               case 17:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(8, 10); }
                  break;
               case 18:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(8, 10); }
                  break;
               case 21:
                  if (curChar == 114)
                     { jjAddStates(17, 18); }
                  break;
               case 22:
                  if (curChar == 116 && kind > 179)
                     kind = 179;
                  break;
               case 25:
                  if (curChar == 101 && kind > 179)
                     kind = 179;
                  break;
               case 26:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 40:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(23, 24); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(21, 22); }
                  break;
               case 12:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(11, 13); }
                  break;
               case 17:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(8, 10); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 44 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x80L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      default :
         return 2;
   }
   return 2;
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, "\50", "\51", "\173", 
"\175", "\133", "\135", "\73", "\72", "\77", "\56", "\54", "\75\75", "\41\75", 
"\74\75", "\76\75", "\74", "\76", "\53", "\55", "\52", "\57", 
"\141\154\151\143\145\142\154\165\145", "\141\156\164\151\161\165\145\167\150\151\164\145", "\141\161\165\141", 
"\141\161\165\141\155\141\162\151\156\145", "\141\172\165\162\145", "\142\145\151\147\145", "\142\151\163\161\165\145", 
"\142\154\141\143\153", "\142\154\141\156\143\150\145\144\141\154\155\157\156\144", 
"\142\154\165\145", "\142\154\165\145\166\151\157\154\145\164", "\142\162\157\167\156", 
"\142\165\162\154\171\167\157\157\144", "\143\141\144\145\164\142\154\165\145", 
"\143\150\141\162\164\162\145\165\163\145", "\143\150\157\143\157\154\141\164\145", "\143\157\162\141\154", 
"\143\157\162\156\146\154\157\167\145\162\142\154\165\145", "\143\157\162\156\163\151\154\153", "\143\162\151\155\163\157\156", 
"\143\171\141\156", "\144\141\162\153\142\154\165\145", "\144\141\162\153\143\171\141\156", 
"\144\141\162\153\147\157\154\144\145\156\162\157\144", "\144\141\162\153\147\162\141\171", "\144\141\162\153\147\162\145\145\156", 
"\144\141\162\153\147\162\145\171", "\144\141\162\153\153\150\141\153\151", 
"\144\141\162\153\155\141\147\145\156\164\141", "\144\141\162\153\157\154\151\166\145\147\162\145\145\156", 
"\144\141\162\153\157\162\141\156\147\145", "\144\141\162\153\157\162\143\150\151\144", "\144\141\162\153\162\145\144", 
"\144\141\162\153\163\141\154\155\157\156", "\144\141\162\153\163\145\141\147\162\145\145\156", 
"\144\141\162\153\163\154\141\164\145\142\154\165\145", "\144\141\162\153\163\154\141\164\145\147\162\141\171", 
"\144\141\162\153\163\154\141\164\145\147\162\145\171", "\144\141\162\153\164\165\162\161\165\157\151\163\145", 
"\144\141\162\153\166\151\157\154\145\164", "\144\145\145\160\160\151\156\153", 
"\144\145\145\160\163\153\171\142\154\165\145", "\144\151\155\147\162\141\171", "\144\151\155\147\162\145\171", 
"\144\157\144\147\145\162\142\154\165\145", "\146\151\162\145\142\162\151\143\153", 
"\146\154\157\162\141\154\167\150\151\164\145", "\146\157\162\145\163\164\147\162\145\145\156", 
"\146\165\143\150\163\151\141", "\147\141\151\156\163\142\157\162\157", 
"\147\150\157\163\164\167\150\151\164\145", "\147\157\154\144", "\147\157\154\144\145\156\162\157\144", 
"\147\162\141\171", "\147\162\145\145\156", "\147\162\145\145\156\171\145\154\154\157\167", 
"\147\162\145\171", "\150\157\156\145\171\144\145\167", "\150\157\164\160\151\156\153", 
"\151\156\144\151\141\156\162\145\144", "\151\156\144\151\147\157", "\151\166\157\162\171", "\153\150\141\153\151", 
"\154\141\166\145\156\144\145\162", "\154\141\166\145\156\144\145\162\142\154\165\163\150", 
"\154\141\167\156\147\162\145\145\156", "\154\145\155\157\156\143\150\151\146\146\157\156", 
"\154\151\147\150\164\142\154\165\145", "\154\151\147\150\164\143\157\162\141\154", 
"\154\151\147\150\164\143\171\141\156", 
"\154\151\147\150\164\147\157\154\144\145\156\162\157\144\171\145\154\154\157\167", "\154\151\147\150\164\147\162\141\171", 
"\154\151\147\150\164\147\162\145\145\156", "\154\151\147\150\164\147\162\145\171", 
"\154\151\147\150\164\160\151\156\153", "\154\151\147\150\164\163\141\154\155\157\156", 
"\154\151\147\150\164\163\145\141\147\162\145\145\156", "\154\151\147\150\164\163\153\171\142\154\165\145", 
"\154\151\147\150\164\163\154\141\164\145\147\162\141\171", "\154\151\147\150\164\163\154\141\164\145\147\162\145\171", 
"\154\151\147\150\164\163\164\145\145\154\142\154\165\145", "\154\151\147\150\164\171\145\154\154\157\167", "\154\151\155\145", 
"\154\151\155\145\147\162\145\145\156", "\154\151\156\145\156", "\155\141\147\145\156\164\141", 
"\155\141\162\157\157\156", "\155\145\144\151\165\155\141\161\165\141\155\141\162\151\156\145", 
"\155\145\144\151\165\155\142\154\165\145", "\155\145\144\151\165\155\157\162\143\150\151\144", 
"\155\145\144\151\165\155\160\165\162\160\154\145", "\155\145\144\151\165\155\163\145\141\147\162\145\145\156", 
"\155\145\144\151\165\155\163\154\141\164\145\142\154\165\145", "\155\145\144\151\165\155\163\160\162\151\156\147\147\162\145\145\156", 
"\155\145\144\151\165\155\164\165\162\161\165\157\151\163\145", "\155\145\144\151\165\155\166\151\157\154\145\164\162\145\144", 
"\155\151\144\156\151\147\150\164\142\154\165\145", "\155\151\156\164\143\162\145\141\155", 
"\155\151\163\164\171\162\157\163\145", "\155\157\143\143\141\163\151\156", 
"\156\141\166\141\152\157\167\150\151\164\145", "\156\141\166\171", "\157\154\144\154\141\143\145", "\157\154\151\166\145", 
"\157\154\151\166\145\144\162\141\142", "\157\162\141\156\147\145", "\157\162\141\156\147\145\162\145\144", 
"\157\162\143\150\151\144", "\160\141\154\145\147\157\154\144\145\156\162\157\144", 
"\160\141\154\145\147\162\145\145\156", "\160\141\154\145\164\165\162\161\165\157\151\163\145", 
"\160\141\154\145\166\151\157\154\145\164\162\145\144", "\160\141\160\141\171\141\167\150\151\160", 
"\160\145\141\143\150\160\165\146\146", "\160\145\162\165", "\160\151\156\153", "\160\154\165\155", 
"\160\157\167\144\145\162\142\154\165\145", "\160\165\162\160\154\145", "\162\145\144", 
"\162\157\163\171\142\162\157\167\156", "\162\157\171\141\154\142\154\165\145", 
"\163\141\144\144\154\145\142\162\157\167\156", "\163\141\154\155\157\156", "\163\141\156\144\171\142\162\157\167\156", 
"\163\145\141\147\162\145\145\156", "\163\145\141\163\150\145\154\154", "\163\151\145\156\156\141", 
"\163\151\154\166\145\162", "\163\153\171\142\154\165\145", "\163\154\141\164\145\142\154\165\145", 
"\163\154\141\164\145\147\162\141\171", "\163\154\141\164\145\147\162\145\171", "\163\156\157\167", 
"\163\160\162\151\156\147\147\162\145\145\156", "\163\164\145\145\154\142\154\165\145", "\164\141\156", "\164\145\141\154", 
"\164\150\151\163\164\154\145", "\164\157\155\141\164\157", "\164\165\162\161\165\157\151\163\145", 
"\166\151\157\154\145\164", "\167\150\145\141\164", "\167\150\151\164\145", 
"\167\150\151\164\145\163\155\157\153\145", "\171\145\154\154\157\167", "\171\145\154\154\157\167\147\162\145\145\156", 
"\162\147\142", "\154\151\156\145", null, "\143\151\162\143\154\145", "\164\145\170\164", 
"\150\145\162\163\150\145\171", "\75", "\167\151\164\150", "\164\162\165\145", "\146\141\154\163\145", 
"\156\151\154", "\167\151\144\164\150", "\150\145\151\147\150\164", null, null, null, null, 
null, null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   34, 35, 37, 38, 4, 39, 40, 43, 17, 18, 20, 12, 13, 15, 34, 35, 
   37, 24, 32, 7, 8, 1, 2, 41, 42, 
};

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 8)
       {
          jjmatchedKind = 8;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public StreamPlotParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public StreamPlotParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 44; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "INSIDE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffffe01L, 0xffffffffffffffffL, 0x3fffffffffffffffL, 0x1bcL, 
};
static final long[] jjtoSkip = {
   0x1feL, 0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[44];
    private final int[] jjstateSet = new int[2 * 44];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
