/* StreamPlotParser.java */
/* Generated By:JavaCC: Do not edit this line. StreamPlotParser.java */
package sandbox.tools.streamplot.parser;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.AbstractMap;
import java.math.BigDecimal;
import java.math.BigInteger;
import sandbox.graphics.Canvas;
import sandbox.util.function.FunctionalMap;

@SuppressWarnings("unchecked")
public class StreamPlotParser implements StreamPlotParserConstants {
private Canvas canvas=null;

public void setCanvas(final Canvas canvas) {
    this.canvas = canvas;
        }
private double objectToDouble(Object o) {
        if(o instanceof Integer) return Integer.class.cast(o).doubleValue();
        if(o instanceof Number) return Number.class.cast(o).doubleValue();
        throw new IllegalArgumentException(""+o);
        }

private double toX(Object o) {
        return objectToDouble(o);
        }
private double toY(Object o) {
        return objectToDouble(o);
        }

  final public void input() throws ParseException {
    blockContent();
    jj_consume_token(0);
}

  final private void blockContent() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LINE:
      case RECT:
      case CIRCLE:
      case TEXT:
      case HERSHEY:
      case WITH:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LINE:{
        line();
        break;
        }
      case RECT:{
        rect();
        break;
        }
      case CIRCLE:{
        circle();
        break;
        }
      case WITH:{
        block();
        break;
        }
      case TEXT:{
        text();
        break;
        }
      case HERSHEY:{
        hershey();
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  final private void block() throws ParseException {FunctionalMap<String,Object> fm=new FunctionalMap<String,Object>();
    jj_consume_token(WITH);
    jj_consume_token(OARRAY);
    fm = functionalMap();
canvas.begin(fm);
    jj_consume_token(CARRAY);
    jj_consume_token(OBRACKET);
    blockContent();
    jj_consume_token(CBRACKET);
canvas.end();
}

  final private void line() throws ParseException {Object x1,y1,x2,y2;
    jj_consume_token(LINE);
    jj_consume_token(OPAR);
    x1 = coord();
    jj_consume_token(COMMA);
    y1 = coord();
    jj_consume_token(COMMA);
    x2 = coord();
    jj_consume_token(COMMA);
    y2 = coord();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      functionalMap();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(CPAR);
    jj_consume_token(SEMICOLON);
canvas.line(toX(x1),toY(y1),toX(x2),toY(y2),new FunctionalMap<String,Object>());
}

  final private void circle() throws ParseException {Object cx,cy,r;FunctionalMap<String,Object> fm=new FunctionalMap<String,Object>();
    jj_consume_token(CIRCLE);
    jj_consume_token(OPAR);
    cx = coord();
    jj_consume_token(COMMA);
    cy = coord();
    jj_consume_token(COMMA);
    r = coord();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      fm = functionalMap();
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(CPAR);
    jj_consume_token(SEMICOLON);
canvas.circle(toX(cx),toY(cy),objectToDouble(r), fm);
}

  final private void rect() throws ParseException {Object x,y,w,h;FunctionalMap<String,Object> fm=new FunctionalMap<String,Object>();
    jj_consume_token(RECT);
    jj_consume_token(OPAR);
    x = coord();
    jj_consume_token(COMMA);
    y = coord();
    jj_consume_token(COMMA);
    w = coord();
    jj_consume_token(COMMA);
    h = coord();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      fm = functionalMap();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(CPAR);
    jj_consume_token(SEMICOLON);
canvas.rectangle(toX(x),toY(y),toX(w),toY(h),fm);
}

  final private void hershey() throws ParseException {Object x,y,w,h,content;FunctionalMap<String,Object> fm=new FunctionalMap<String,Object>();
    jj_consume_token(HERSHEY);
    jj_consume_token(OPAR);
    x = coord();
    jj_consume_token(COMMA);
    y = coord();
    jj_consume_token(COMMA);
    w = coord();
    jj_consume_token(COMMA);
    h = coord();
    jj_consume_token(COMMA);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DOUBLE_QUOTE_LITERAL:{
      content = string();
      break;
      }
    case FLOATING_NUMBER:{
      content = floating();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      fm = functionalMap();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(CPAR);
    jj_consume_token(SEMICOLON);
canvas.hershey(toX(x),toY(y),toX(w),toY(h),String.valueOf(content),fm);
}

  final private void text() throws ParseException {Object x,y,content;FunctionalMap<String,Object> fm=new FunctionalMap<String,Object>();
    jj_consume_token(TEXT);
    jj_consume_token(OPAR);
    x = coord();
    jj_consume_token(COMMA);
    y = coord();
    jj_consume_token(COMMA);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DOUBLE_QUOTE_LITERAL:{
      content = string();
      break;
      }
    case FLOATING_NUMBER:{
      content = floating();
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      fm = functionalMap();
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(CPAR);
    jj_consume_token(SEMICOLON);
canvas.text(toX(x),toY(y),String.valueOf(content),fm);
}

  final private Object coord() throws ParseException {Token t;String s;double f;int i;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FLOATING_NUMBER:{
      f = floating();
{if ("" != null) return f;}
      break;
      }
    case INT_NUMBER:{
      i = integer();
{if ("" != null) return i;}
      break;
      }
    case DOUBLE_QUOTE_LITERAL:{
      s = string();
{if ("" != null) return s;}
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final private double width() throws ParseException {
    jj_consume_token(WIDTH);
    jj_consume_token(OPAR);
    jj_consume_token(CPAR);
{if ("" != null) return canvas.getWidth();}
    throw new Error("Missing return statement in function");
}

  final private double floating() throws ParseException {Token t;
    t = jj_consume_token(FLOATING_NUMBER);
{if ("" != null) return Double.parseDouble(t.image);}
    throw new Error("Missing return statement in function");
}

  final private int integer() throws ParseException {Token t;
    t = jj_consume_token(INT_NUMBER);
{if ("" != null) return Integer.parseInt(t.image);}
    throw new Error("Missing return statement in function");
}

  final private String string() throws ParseException {Token t;
    t = jj_consume_token(DOUBLE_QUOTE_LITERAL);
String s= t.image;
                {if ("" != null) return s.substring(1,s.length()-1);}
    throw new Error("Missing return statement in function");
}

  final private String identifier() throws ParseException {Token t;
    t = jj_consume_token(IDENTIFIER);
{if ("" != null) return t.image;}
    throw new Error("Missing return statement in function");
}

  final private FunctionalMap<String,Object > functionalMap() throws ParseException {AbstractMap.SimpleEntry<String,Object> kv;  final Map<String,Object > hash=new HashMap< String,Object>();
    kv = mapEntry();
hash.put(kv.getKey(),kv.getValue());
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      kv = mapEntry();
hash.put(kv.getKey(),kv.getValue());
    }
{if ("" != null) return new FunctionalMap<String,Object>(hash);}
    throw new Error("Missing return statement in function");
}

  final private AbstractMap.SimpleEntry<String,Object> mapEntry() throws ParseException {String k; Object v;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DOUBLE_QUOTE_LITERAL:{
      k = string();
      break;
      }
    case IDENTIFIER:{
      k = identifier();
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(COLON);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DOUBLE_QUOTE_LITERAL:{
      v = string();
      break;
      }
    case ALICEBLUE:
    case ANTIQUEWHITE:
    case AQUA:
    case AQUAMARINE:
    case AZURE:
    case BEIGE:
    case BISQUE:
    case BLACK:
    case BLANCHEDALMOND:
    case BLUE:
    case BLUEVIOLET:
    case BROWN:
    case BURLYWOOD:
    case CADETBLUE:
    case CHARTREUSE:
    case CHOCOLATE:
    case CORAL:
    case CORNFLOWERBLUE:
    case CORNSILK:
    case CRIMSON:
    case CYAN:
    case DARKBLUE:
    case DARKCYAN:
    case DARKGOLDENROD:
    case DARKGRAY:
    case DARKGREEN:
    case DARKGREY:
    case DARKKHAKI:
    case DARKMAGENTA:
    case DARKOLIVEGREEN:
    case DARKORANGE:
    case DARKORCHID:
    case DARKRED:
    case DARKSALMON:
    case DARKSEAGREEN:
    case DARKSLATEBLUE:
    case DARKSLATEGRAY:
    case DARKSLATEGREY:
    case DARKTURQUOISE:
    case DARKVIOLET:
    case DEEPPINK:
    case DEEPSKYBLUE:
    case DIMGRAY:
    case DIMGREY:
    case DODGERBLUE:
    case FIREBRICK:
    case FLORALWHITE:
    case FORESTGREEN:
    case FUCHSIA:
    case GAINSBORO:
    case GHOSTWHITE:
    case GOLD:
    case GOLDENROD:
    case GRAY:
    case GREEN:
    case GREENYELLOW:
    case GREY:
    case HONEYDEW:
    case HOTPINK:
    case INDIANRED:
    case INDIGO:
    case IVORY:
    case KHAKI:
    case LAVENDER:
    case LAVENDERBLUSH:
    case LAWNGREEN:
    case LEMONCHIFFON:
    case LIGHTBLUE:
    case LIGHTCORAL:
    case LIGHTCYAN:
    case LIGHTGOLDENRODYELLOW:
    case LIGHTGRAY:
    case LIGHTGREEN:
    case LIGHTGREY:
    case LIGHTPINK:
    case LIGHTSALMON:
    case LIGHTSEAGREEN:
    case LIGHTSKYBLUE:
    case LIGHTSLATEGRAY:
    case LIGHTSLATEGREY:
    case LIGHTSTEELBLUE:
    case LIGHTYELLOW:
    case LIME:
    case LIMEGREEN:
    case LINEN:
    case MAGENTA:
    case MAROON:
    case MEDIUMAQUAMARINE:
    case MEDIUMBLUE:
    case MEDIUMORCHID:
    case MEDIUMPURPLE:
    case MEDIUMSEAGREEN:
    case MEDIUMSLATEBLUE:
    case MEDIUMSPRINGGREEN:
    case MEDIUMTURQUOISE:
    case MEDIUMVIOLETRED:
    case MIDNIGHTBLUE:
    case MINTCREAM:
    case MISTYROSE:
    case MOCCASIN:
    case NAVAJOWHITE:
    case NAVY:
    case OLDLACE:
    case OLIVE:
    case OLIVEDRAB:
    case ORANGE:
    case ORANGERED:
    case ORCHID:
    case PALEGOLDENROD:
    case PALEGREEN:
    case PALETURQUOISE:
    case PALEVIOLETRED:
    case PAPAYAWHIP:
    case PEACHPUFF:
    case PERU:
    case PINK:
    case PLUM:
    case POWDERBLUE:
    case PURPLE:
    case RED:
    case ROSYBROWN:
    case ROYALBLUE:
    case SADDLEBROWN:
    case SALMON:
    case SANDYBROWN:
    case SEAGREEN:
    case SEASHELL:
    case SIENNA:
    case SILVER:
    case SKYBLUE:
    case SLATEBLUE:
    case SLATEGRAY:
    case SLATEGREY:
    case SNOW:
    case SPRINGGREEN:
    case STEELBLUE:
    case TAN:
    case TEAL:
    case THISTLE:
    case TOMATO:
    case TURQUOISE:
    case VIOLET:
    case WHEAT:
    case WHITE:
    case WHITESMOKE:
    case YELLOW:
    case YELLOWGREEN:
    case RGB:{
      v = color();
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
String pairKey=k;
                Object pairValue=v;
                {if ("" != null) return new AbstractMap.SimpleEntry<String,Object>(pairKey,pairValue);}
    throw new Error("Missing return statement in function");
}

  final private java.awt.Color color() throws ParseException {java.awt.Color c;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RGB:{
      c = rgb();
      break;
      }
    case ALICEBLUE:
    case ANTIQUEWHITE:
    case AQUA:
    case AQUAMARINE:
    case AZURE:
    case BEIGE:
    case BISQUE:
    case BLACK:
    case BLANCHEDALMOND:
    case BLUE:
    case BLUEVIOLET:
    case BROWN:
    case BURLYWOOD:
    case CADETBLUE:
    case CHARTREUSE:
    case CHOCOLATE:
    case CORAL:
    case CORNFLOWERBLUE:
    case CORNSILK:
    case CRIMSON:
    case CYAN:
    case DARKBLUE:
    case DARKCYAN:
    case DARKGOLDENROD:
    case DARKGRAY:
    case DARKGREEN:
    case DARKGREY:
    case DARKKHAKI:
    case DARKMAGENTA:
    case DARKOLIVEGREEN:
    case DARKORANGE:
    case DARKORCHID:
    case DARKRED:
    case DARKSALMON:
    case DARKSEAGREEN:
    case DARKSLATEBLUE:
    case DARKSLATEGRAY:
    case DARKSLATEGREY:
    case DARKTURQUOISE:
    case DARKVIOLET:
    case DEEPPINK:
    case DEEPSKYBLUE:
    case DIMGRAY:
    case DIMGREY:
    case DODGERBLUE:
    case FIREBRICK:
    case FLORALWHITE:
    case FORESTGREEN:
    case FUCHSIA:
    case GAINSBORO:
    case GHOSTWHITE:
    case GOLD:
    case GOLDENROD:
    case GRAY:
    case GREEN:
    case GREENYELLOW:
    case GREY:
    case HONEYDEW:
    case HOTPINK:
    case INDIANRED:
    case INDIGO:
    case IVORY:
    case KHAKI:
    case LAVENDER:
    case LAVENDERBLUSH:
    case LAWNGREEN:
    case LEMONCHIFFON:
    case LIGHTBLUE:
    case LIGHTCORAL:
    case LIGHTCYAN:
    case LIGHTGOLDENRODYELLOW:
    case LIGHTGRAY:
    case LIGHTGREEN:
    case LIGHTGREY:
    case LIGHTPINK:
    case LIGHTSALMON:
    case LIGHTSEAGREEN:
    case LIGHTSKYBLUE:
    case LIGHTSLATEGRAY:
    case LIGHTSLATEGREY:
    case LIGHTSTEELBLUE:
    case LIGHTYELLOW:
    case LIME:
    case LIMEGREEN:
    case LINEN:
    case MAGENTA:
    case MAROON:
    case MEDIUMAQUAMARINE:
    case MEDIUMBLUE:
    case MEDIUMORCHID:
    case MEDIUMPURPLE:
    case MEDIUMSEAGREEN:
    case MEDIUMSLATEBLUE:
    case MEDIUMSPRINGGREEN:
    case MEDIUMTURQUOISE:
    case MEDIUMVIOLETRED:
    case MIDNIGHTBLUE:
    case MINTCREAM:
    case MISTYROSE:
    case MOCCASIN:
    case NAVAJOWHITE:
    case NAVY:
    case OLDLACE:
    case OLIVE:
    case OLIVEDRAB:
    case ORANGE:
    case ORANGERED:
    case ORCHID:
    case PALEGOLDENROD:
    case PALEGREEN:
    case PALETURQUOISE:
    case PALEVIOLETRED:
    case PAPAYAWHIP:
    case PEACHPUFF:
    case PERU:
    case PINK:
    case PLUM:
    case POWDERBLUE:
    case PURPLE:
    case RED:
    case ROSYBROWN:
    case ROYALBLUE:
    case SADDLEBROWN:
    case SALMON:
    case SANDYBROWN:
    case SEAGREEN:
    case SEASHELL:
    case SIENNA:
    case SILVER:
    case SKYBLUE:
    case SLATEBLUE:
    case SLATEGRAY:
    case SLATEGREY:
    case SNOW:
    case SPRINGGREEN:
    case STEELBLUE:
    case TAN:
    case TEAL:
    case THISTLE:
    case TOMATO:
    case TURQUOISE:
    case VIOLET:
    case WHEAT:
    case WHITE:
    case WHITESMOKE:
    case YELLOW:
    case YELLOWGREEN:{
      c = namedColor();
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return c;}
    throw new Error("Missing return statement in function");
}

  final private java.awt.Color rgb() throws ParseException {int r,g,b,a;
    jj_consume_token(RGB);
    jj_consume_token(OPAR);
    r = integer();
    jj_consume_token(COMMA);
    g = integer();
    jj_consume_token(COMMA);
    b = integer();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      integer();
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    jj_consume_token(CPAR);
{if ("" != null) return new java.awt.Color(r,g,b);}
    throw new Error("Missing return statement in function");
}

  final private java.awt.Color namedColor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ALICEBLUE:{
      jj_consume_token(ALICEBLUE);
{if ("" != null) return new java.awt.Color(240,248,255);}
      break;
      }
    case ANTIQUEWHITE:{
      jj_consume_token(ANTIQUEWHITE);
{if ("" != null) return new java.awt.Color(250,235,215);}
      break;
      }
    case AQUA:{
      jj_consume_token(AQUA);
{if ("" != null) return new java.awt.Color(0,255,255);}
      break;
      }
    case AQUAMARINE:{
      jj_consume_token(AQUAMARINE);
{if ("" != null) return new java.awt.Color(127,255,212);}
      break;
      }
    case AZURE:{
      jj_consume_token(AZURE);
{if ("" != null) return new java.awt.Color(240,255,255);}
      break;
      }
    case BEIGE:{
      jj_consume_token(BEIGE);
{if ("" != null) return new java.awt.Color(245,245,220);}
      break;
      }
    case BISQUE:{
      jj_consume_token(BISQUE);
{if ("" != null) return new java.awt.Color(255,228,196);}
      break;
      }
    case BLACK:{
      jj_consume_token(BLACK);
{if ("" != null) return new java.awt.Color(0,0,0);}
      break;
      }
    case BLANCHEDALMOND:{
      jj_consume_token(BLANCHEDALMOND);
{if ("" != null) return new java.awt.Color(255,235,205);}
      break;
      }
    case BLUE:{
      jj_consume_token(BLUE);
{if ("" != null) return new java.awt.Color(0,0,255);}
      break;
      }
    case BLUEVIOLET:{
      jj_consume_token(BLUEVIOLET);
{if ("" != null) return new java.awt.Color(138,43,226);}
      break;
      }
    case BROWN:{
      jj_consume_token(BROWN);
{if ("" != null) return new java.awt.Color(165,42,42);}
      break;
      }
    case BURLYWOOD:{
      jj_consume_token(BURLYWOOD);
{if ("" != null) return new java.awt.Color(222,184,135);}
      break;
      }
    case CADETBLUE:{
      jj_consume_token(CADETBLUE);
{if ("" != null) return new java.awt.Color(95,158,160);}
      break;
      }
    case CHARTREUSE:{
      jj_consume_token(CHARTREUSE);
{if ("" != null) return new java.awt.Color(127,255,0);}
      break;
      }
    case CHOCOLATE:{
      jj_consume_token(CHOCOLATE);
{if ("" != null) return new java.awt.Color(210,105,30);}
      break;
      }
    case CORAL:{
      jj_consume_token(CORAL);
{if ("" != null) return new java.awt.Color(255,127,80);}
      break;
      }
    case CORNFLOWERBLUE:{
      jj_consume_token(CORNFLOWERBLUE);
{if ("" != null) return new java.awt.Color(100,149,237);}
      break;
      }
    case CORNSILK:{
      jj_consume_token(CORNSILK);
{if ("" != null) return new java.awt.Color(255,248,220);}
      break;
      }
    case CRIMSON:{
      jj_consume_token(CRIMSON);
{if ("" != null) return new java.awt.Color(220,20,60);}
      break;
      }
    case CYAN:{
      jj_consume_token(CYAN);
{if ("" != null) return new java.awt.Color(0,255,255);}
      break;
      }
    case DARKBLUE:{
      jj_consume_token(DARKBLUE);
{if ("" != null) return new java.awt.Color(0,0,139);}
      break;
      }
    case DARKCYAN:{
      jj_consume_token(DARKCYAN);
{if ("" != null) return new java.awt.Color(0,139,139);}
      break;
      }
    case DARKGOLDENROD:{
      jj_consume_token(DARKGOLDENROD);
{if ("" != null) return new java.awt.Color(184,134,11);}
      break;
      }
    case DARKGRAY:{
      jj_consume_token(DARKGRAY);
{if ("" != null) return new java.awt.Color(169,169,169);}
      break;
      }
    case DARKGREEN:{
      jj_consume_token(DARKGREEN);
{if ("" != null) return new java.awt.Color(0,100,0);}
      break;
      }
    case DARKGREY:{
      jj_consume_token(DARKGREY);
{if ("" != null) return new java.awt.Color(169,169,169);}
      break;
      }
    case DARKKHAKI:{
      jj_consume_token(DARKKHAKI);
{if ("" != null) return new java.awt.Color(189,183,107);}
      break;
      }
    case DARKMAGENTA:{
      jj_consume_token(DARKMAGENTA);
{if ("" != null) return new java.awt.Color(139,0,139);}
      break;
      }
    case DARKOLIVEGREEN:{
      jj_consume_token(DARKOLIVEGREEN);
{if ("" != null) return new java.awt.Color(85,107,47);}
      break;
      }
    case DARKORANGE:{
      jj_consume_token(DARKORANGE);
{if ("" != null) return new java.awt.Color(255,140,0);}
      break;
      }
    case DARKORCHID:{
      jj_consume_token(DARKORCHID);
{if ("" != null) return new java.awt.Color(153,50,204);}
      break;
      }
    case DARKRED:{
      jj_consume_token(DARKRED);
{if ("" != null) return new java.awt.Color(139,0,0);}
      break;
      }
    case DARKSALMON:{
      jj_consume_token(DARKSALMON);
{if ("" != null) return new java.awt.Color(233,150,122);}
      break;
      }
    case DARKSEAGREEN:{
      jj_consume_token(DARKSEAGREEN);
{if ("" != null) return new java.awt.Color(143,188,143);}
      break;
      }
    case DARKSLATEBLUE:{
      jj_consume_token(DARKSLATEBLUE);
{if ("" != null) return new java.awt.Color(72,61,139);}
      break;
      }
    case DARKSLATEGRAY:{
      jj_consume_token(DARKSLATEGRAY);
{if ("" != null) return new java.awt.Color(47,79,79);}
      break;
      }
    case DARKSLATEGREY:{
      jj_consume_token(DARKSLATEGREY);
{if ("" != null) return new java.awt.Color(47,79,79);}
      break;
      }
    case DARKTURQUOISE:{
      jj_consume_token(DARKTURQUOISE);
{if ("" != null) return new java.awt.Color(0,206,209);}
      break;
      }
    case DARKVIOLET:{
      jj_consume_token(DARKVIOLET);
{if ("" != null) return new java.awt.Color(148,0,211);}
      break;
      }
    case DEEPPINK:{
      jj_consume_token(DEEPPINK);
{if ("" != null) return new java.awt.Color(255,20,147);}
      break;
      }
    case DEEPSKYBLUE:{
      jj_consume_token(DEEPSKYBLUE);
{if ("" != null) return new java.awt.Color(0,191,255);}
      break;
      }
    case DIMGRAY:{
      jj_consume_token(DIMGRAY);
{if ("" != null) return new java.awt.Color(105,105,105);}
      break;
      }
    case DIMGREY:{
      jj_consume_token(DIMGREY);
{if ("" != null) return new java.awt.Color(105,105,105);}
      break;
      }
    case DODGERBLUE:{
      jj_consume_token(DODGERBLUE);
{if ("" != null) return new java.awt.Color(30,144,255);}
      break;
      }
    case FIREBRICK:{
      jj_consume_token(FIREBRICK);
{if ("" != null) return new java.awt.Color(178,34,34);}
      break;
      }
    case FLORALWHITE:{
      jj_consume_token(FLORALWHITE);
{if ("" != null) return new java.awt.Color(255,250,240);}
      break;
      }
    case FORESTGREEN:{
      jj_consume_token(FORESTGREEN);
{if ("" != null) return new java.awt.Color(34,139,34);}
      break;
      }
    case FUCHSIA:{
      jj_consume_token(FUCHSIA);
{if ("" != null) return new java.awt.Color(255,0,255);}
      break;
      }
    case GAINSBORO:{
      jj_consume_token(GAINSBORO);
{if ("" != null) return new java.awt.Color(220,220,220);}
      break;
      }
    case GHOSTWHITE:{
      jj_consume_token(GHOSTWHITE);
{if ("" != null) return new java.awt.Color(248,248,255);}
      break;
      }
    case GOLD:{
      jj_consume_token(GOLD);
{if ("" != null) return new java.awt.Color(255,215,0);}
      break;
      }
    case GOLDENROD:{
      jj_consume_token(GOLDENROD);
{if ("" != null) return new java.awt.Color(218,165,32);}
      break;
      }
    case GRAY:{
      jj_consume_token(GRAY);
{if ("" != null) return new java.awt.Color(128,128,128);}
      break;
      }
    case GREEN:{
      jj_consume_token(GREEN);
{if ("" != null) return new java.awt.Color(0,128,0);}
      break;
      }
    case GREENYELLOW:{
      jj_consume_token(GREENYELLOW);
{if ("" != null) return new java.awt.Color(173,255,47);}
      break;
      }
    case GREY:{
      jj_consume_token(GREY);
{if ("" != null) return new java.awt.Color(128,128,128);}
      break;
      }
    case HONEYDEW:{
      jj_consume_token(HONEYDEW);
{if ("" != null) return new java.awt.Color(240,255,240);}
      break;
      }
    case HOTPINK:{
      jj_consume_token(HOTPINK);
{if ("" != null) return new java.awt.Color(255,105,180);}
      break;
      }
    case INDIANRED:{
      jj_consume_token(INDIANRED);
{if ("" != null) return new java.awt.Color(205,92,92);}
      break;
      }
    case INDIGO:{
      jj_consume_token(INDIGO);
{if ("" != null) return new java.awt.Color(75,0,130);}
      break;
      }
    case IVORY:{
      jj_consume_token(IVORY);
{if ("" != null) return new java.awt.Color(255,255,240);}
      break;
      }
    case KHAKI:{
      jj_consume_token(KHAKI);
{if ("" != null) return new java.awt.Color(240,230,140);}
      break;
      }
    case LAVENDER:{
      jj_consume_token(LAVENDER);
{if ("" != null) return new java.awt.Color(230,230,250);}
      break;
      }
    case LAVENDERBLUSH:{
      jj_consume_token(LAVENDERBLUSH);
{if ("" != null) return new java.awt.Color(255,240,245);}
      break;
      }
    case LAWNGREEN:{
      jj_consume_token(LAWNGREEN);
{if ("" != null) return new java.awt.Color(124,252,0);}
      break;
      }
    case LEMONCHIFFON:{
      jj_consume_token(LEMONCHIFFON);
{if ("" != null) return new java.awt.Color(255,250,205);}
      break;
      }
    case LIGHTBLUE:{
      jj_consume_token(LIGHTBLUE);
{if ("" != null) return new java.awt.Color(173,216,230);}
      break;
      }
    case LIGHTCORAL:{
      jj_consume_token(LIGHTCORAL);
{if ("" != null) return new java.awt.Color(240,128,128);}
      break;
      }
    case LIGHTCYAN:{
      jj_consume_token(LIGHTCYAN);
{if ("" != null) return new java.awt.Color(224,255,255);}
      break;
      }
    case LIGHTGOLDENRODYELLOW:{
      jj_consume_token(LIGHTGOLDENRODYELLOW);
{if ("" != null) return new java.awt.Color(250,250,210);}
      break;
      }
    case LIGHTGRAY:{
      jj_consume_token(LIGHTGRAY);
{if ("" != null) return new java.awt.Color(211,211,211);}
      break;
      }
    case LIGHTGREEN:{
      jj_consume_token(LIGHTGREEN);
{if ("" != null) return new java.awt.Color(144,238,144);}
      break;
      }
    case LIGHTGREY:{
      jj_consume_token(LIGHTGREY);
{if ("" != null) return new java.awt.Color(211,211,211);}
      break;
      }
    case LIGHTPINK:{
      jj_consume_token(LIGHTPINK);
{if ("" != null) return new java.awt.Color(255,182,193);}
      break;
      }
    case LIGHTSALMON:{
      jj_consume_token(LIGHTSALMON);
{if ("" != null) return new java.awt.Color(255,160,122);}
      break;
      }
    case LIGHTSEAGREEN:{
      jj_consume_token(LIGHTSEAGREEN);
{if ("" != null) return new java.awt.Color(32,178,170);}
      break;
      }
    case LIGHTSKYBLUE:{
      jj_consume_token(LIGHTSKYBLUE);
{if ("" != null) return new java.awt.Color(135,206,250);}
      break;
      }
    case LIGHTSLATEGRAY:{
      jj_consume_token(LIGHTSLATEGRAY);
{if ("" != null) return new java.awt.Color(119,136,153);}
      break;
      }
    case LIGHTSLATEGREY:{
      jj_consume_token(LIGHTSLATEGREY);
{if ("" != null) return new java.awt.Color(119,136,153);}
      break;
      }
    case LIGHTSTEELBLUE:{
      jj_consume_token(LIGHTSTEELBLUE);
{if ("" != null) return new java.awt.Color(176,196,222);}
      break;
      }
    case LIGHTYELLOW:{
      jj_consume_token(LIGHTYELLOW);
{if ("" != null) return new java.awt.Color(255,255,224);}
      break;
      }
    case LIME:{
      jj_consume_token(LIME);
{if ("" != null) return new java.awt.Color(0,255,0);}
      break;
      }
    case LIMEGREEN:{
      jj_consume_token(LIMEGREEN);
{if ("" != null) return new java.awt.Color(50,205,50);}
      break;
      }
    case LINEN:{
      jj_consume_token(LINEN);
{if ("" != null) return new java.awt.Color(250,240,230);}
      break;
      }
    case MAGENTA:{
      jj_consume_token(MAGENTA);
{if ("" != null) return new java.awt.Color(255,0,255);}
      break;
      }
    case MAROON:{
      jj_consume_token(MAROON);
{if ("" != null) return new java.awt.Color(128,0,0);}
      break;
      }
    case MEDIUMAQUAMARINE:{
      jj_consume_token(MEDIUMAQUAMARINE);
{if ("" != null) return new java.awt.Color(102,205,170);}
      break;
      }
    case MEDIUMBLUE:{
      jj_consume_token(MEDIUMBLUE);
{if ("" != null) return new java.awt.Color(0,0,205);}
      break;
      }
    case MEDIUMORCHID:{
      jj_consume_token(MEDIUMORCHID);
{if ("" != null) return new java.awt.Color(186,85,211);}
      break;
      }
    case MEDIUMPURPLE:{
      jj_consume_token(MEDIUMPURPLE);
{if ("" != null) return new java.awt.Color(147,112,219);}
      break;
      }
    case MEDIUMSEAGREEN:{
      jj_consume_token(MEDIUMSEAGREEN);
{if ("" != null) return new java.awt.Color(60,179,113);}
      break;
      }
    case MEDIUMSLATEBLUE:{
      jj_consume_token(MEDIUMSLATEBLUE);
{if ("" != null) return new java.awt.Color(123,104,238);}
      break;
      }
    case MEDIUMSPRINGGREEN:{
      jj_consume_token(MEDIUMSPRINGGREEN);
{if ("" != null) return new java.awt.Color(0,250,154);}
      break;
      }
    case MEDIUMTURQUOISE:{
      jj_consume_token(MEDIUMTURQUOISE);
{if ("" != null) return new java.awt.Color(72,209,204);}
      break;
      }
    case MEDIUMVIOLETRED:{
      jj_consume_token(MEDIUMVIOLETRED);
{if ("" != null) return new java.awt.Color(199,21,133);}
      break;
      }
    case MIDNIGHTBLUE:{
      jj_consume_token(MIDNIGHTBLUE);
{if ("" != null) return new java.awt.Color(25,25,112);}
      break;
      }
    case MINTCREAM:{
      jj_consume_token(MINTCREAM);
{if ("" != null) return new java.awt.Color(245,255,250);}
      break;
      }
    case MISTYROSE:{
      jj_consume_token(MISTYROSE);
{if ("" != null) return new java.awt.Color(255,228,225);}
      break;
      }
    case MOCCASIN:{
      jj_consume_token(MOCCASIN);
{if ("" != null) return new java.awt.Color(255,228,181);}
      break;
      }
    case NAVAJOWHITE:{
      jj_consume_token(NAVAJOWHITE);
{if ("" != null) return new java.awt.Color(255,222,173);}
      break;
      }
    case NAVY:{
      jj_consume_token(NAVY);
{if ("" != null) return new java.awt.Color(0,0,128);}
      break;
      }
    case OLDLACE:{
      jj_consume_token(OLDLACE);
{if ("" != null) return new java.awt.Color(253,245,230);}
      break;
      }
    case OLIVE:{
      jj_consume_token(OLIVE);
{if ("" != null) return new java.awt.Color(128,128,0);}
      break;
      }
    case OLIVEDRAB:{
      jj_consume_token(OLIVEDRAB);
{if ("" != null) return new java.awt.Color(107,142,35);}
      break;
      }
    case ORANGE:{
      jj_consume_token(ORANGE);
{if ("" != null) return new java.awt.Color(255,165,0);}
      break;
      }
    case ORANGERED:{
      jj_consume_token(ORANGERED);
{if ("" != null) return new java.awt.Color(255,69,0);}
      break;
      }
    case ORCHID:{
      jj_consume_token(ORCHID);
{if ("" != null) return new java.awt.Color(218,112,214);}
      break;
      }
    case PALEGOLDENROD:{
      jj_consume_token(PALEGOLDENROD);
{if ("" != null) return new java.awt.Color(238,232,170);}
      break;
      }
    case PALEGREEN:{
      jj_consume_token(PALEGREEN);
{if ("" != null) return new java.awt.Color(152,251,152);}
      break;
      }
    case PALETURQUOISE:{
      jj_consume_token(PALETURQUOISE);
{if ("" != null) return new java.awt.Color(175,238,238);}
      break;
      }
    case PALEVIOLETRED:{
      jj_consume_token(PALEVIOLETRED);
{if ("" != null) return new java.awt.Color(219,112,147);}
      break;
      }
    case PAPAYAWHIP:{
      jj_consume_token(PAPAYAWHIP);
{if ("" != null) return new java.awt.Color(255,239,213);}
      break;
      }
    case PEACHPUFF:{
      jj_consume_token(PEACHPUFF);
{if ("" != null) return new java.awt.Color(255,218,185);}
      break;
      }
    case PERU:{
      jj_consume_token(PERU);
{if ("" != null) return new java.awt.Color(205,133,63);}
      break;
      }
    case PINK:{
      jj_consume_token(PINK);
{if ("" != null) return new java.awt.Color(255,192,203);}
      break;
      }
    case PLUM:{
      jj_consume_token(PLUM);
{if ("" != null) return new java.awt.Color(221,160,221);}
      break;
      }
    case POWDERBLUE:{
      jj_consume_token(POWDERBLUE);
{if ("" != null) return new java.awt.Color(176,224,230);}
      break;
      }
    case PURPLE:{
      jj_consume_token(PURPLE);
{if ("" != null) return new java.awt.Color(128,0,128);}
      break;
      }
    case RED:{
      jj_consume_token(RED);
{if ("" != null) return new java.awt.Color(255,0,0);}
      break;
      }
    case ROSYBROWN:{
      jj_consume_token(ROSYBROWN);
{if ("" != null) return new java.awt.Color(188,143,143);}
      break;
      }
    case ROYALBLUE:{
      jj_consume_token(ROYALBLUE);
{if ("" != null) return new java.awt.Color(65,105,225);}
      break;
      }
    case SADDLEBROWN:{
      jj_consume_token(SADDLEBROWN);
{if ("" != null) return new java.awt.Color(139,69,19);}
      break;
      }
    case SALMON:{
      jj_consume_token(SALMON);
{if ("" != null) return new java.awt.Color(250,128,114);}
      break;
      }
    case SANDYBROWN:{
      jj_consume_token(SANDYBROWN);
{if ("" != null) return new java.awt.Color(244,164,96);}
      break;
      }
    case SEAGREEN:{
      jj_consume_token(SEAGREEN);
{if ("" != null) return new java.awt.Color(46,139,87);}
      break;
      }
    case SEASHELL:{
      jj_consume_token(SEASHELL);
{if ("" != null) return new java.awt.Color(255,245,238);}
      break;
      }
    case SIENNA:{
      jj_consume_token(SIENNA);
{if ("" != null) return new java.awt.Color(160,82,45);}
      break;
      }
    case SILVER:{
      jj_consume_token(SILVER);
{if ("" != null) return new java.awt.Color(192,192,192);}
      break;
      }
    case SKYBLUE:{
      jj_consume_token(SKYBLUE);
{if ("" != null) return new java.awt.Color(135,206,235);}
      break;
      }
    case SLATEBLUE:{
      jj_consume_token(SLATEBLUE);
{if ("" != null) return new java.awt.Color(106,90,205);}
      break;
      }
    case SLATEGRAY:{
      jj_consume_token(SLATEGRAY);
{if ("" != null) return new java.awt.Color(112,128,144);}
      break;
      }
    case SLATEGREY:{
      jj_consume_token(SLATEGREY);
{if ("" != null) return new java.awt.Color(112,128,144);}
      break;
      }
    case SNOW:{
      jj_consume_token(SNOW);
{if ("" != null) return new java.awt.Color(255,250,250);}
      break;
      }
    case SPRINGGREEN:{
      jj_consume_token(SPRINGGREEN);
{if ("" != null) return new java.awt.Color(0,255,127);}
      break;
      }
    case STEELBLUE:{
      jj_consume_token(STEELBLUE);
{if ("" != null) return new java.awt.Color(70,130,180);}
      break;
      }
    case TAN:{
      jj_consume_token(TAN);
{if ("" != null) return new java.awt.Color(210,180,140);}
      break;
      }
    case TEAL:{
      jj_consume_token(TEAL);
{if ("" != null) return new java.awt.Color(0,128,128);}
      break;
      }
    case THISTLE:{
      jj_consume_token(THISTLE);
{if ("" != null) return new java.awt.Color(216,191,216);}
      break;
      }
    case TOMATO:{
      jj_consume_token(TOMATO);
{if ("" != null) return new java.awt.Color(255,99,71);}
      break;
      }
    case TURQUOISE:{
      jj_consume_token(TURQUOISE);
{if ("" != null) return new java.awt.Color(64,224,208);}
      break;
      }
    case VIOLET:{
      jj_consume_token(VIOLET);
{if ("" != null) return new java.awt.Color(238,130,238);}
      break;
      }
    case WHEAT:{
      jj_consume_token(WHEAT);
{if ("" != null) return new java.awt.Color(245,222,179);}
      break;
      }
    case WHITE:{
      jj_consume_token(WHITE);
{if ("" != null) return new java.awt.Color(255,255,255);}
      break;
      }
    case WHITESMOKE:{
      jj_consume_token(WHITESMOKE);
{if ("" != null) return new java.awt.Color(245,245,245);}
      break;
      }
    case YELLOW:{
      jj_consume_token(YELLOW);
{if ("" != null) return new java.awt.Color(255,255,0);}
      break;
      }
    case YELLOWGREEN:{
      jj_consume_token(YELLOWGREEN);
{if ("" != null) return new java.awt.Color(154,205,50);}
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  /** Generated Token Manager. */
  public StreamPlotParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static private int[] jj_la1_6;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	   jj_la1_init_3();
	   jj_la1_init_4();
	   jj_la1_init_5();
	   jj_la1_init_6();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x0,0x0,0x80000,0x80000,0x80000,0x0,0x80000,0x0,0x80000,0x0,0x80000,0x0,0xc0000000,0xc0000000,0x80000,0xc0000000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0xffffffff,0x0,0xffffffff,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0xffffffff,0x0,0xffffffff,};
	}
	private static void jj_la1_init_3() {
	   jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0xffffffff,0x0,0xffffffff,};
	}
	private static void jj_la1_init_4() {
	   jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0xffffffff,0x0,0xffffffff,};
	}
	private static void jj_la1_init_5() {
	   jj_la1_5 = new int[] {0x17c0000,0x17c0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3ffff,0x3ffff,0x0,0x1ffff,};
	}
	private static void jj_la1_init_6() {
	   jj_la1_6 = new int[] {0x0,0x0,0x0,0x0,0x0,0x108,0x0,0x108,0x0,0x118,0x0,0x120,0x100,0x0,0x0,0x0,};
	}

  /** Constructor with InputStream. */
  public StreamPlotParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public StreamPlotParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new StreamPlotParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public StreamPlotParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new StreamPlotParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new StreamPlotParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public StreamPlotParser(StreamPlotParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(StreamPlotParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[201];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 16; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		   if ((jj_la1_3[i] & (1<<j)) != 0) {
			 la1tokens[96+j] = true;
		   }
		   if ((jj_la1_4[i] & (1<<j)) != 0) {
			 la1tokens[128+j] = true;
		   }
		   if ((jj_la1_5[i] & (1<<j)) != 0) {
			 la1tokens[160+j] = true;
		   }
		   if ((jj_la1_6[i] & (1<<j)) != 0) {
			 la1tokens[192+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 201; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
